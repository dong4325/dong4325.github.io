<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-08-14T08:01:12.342Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14_企业级解决方案</title>
    <link href="http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/14_%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/14_%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-08-14T07:56:53.000Z</published>
    <updated>2021-08-14T08:01:12.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><h4 id="“宕机”"><a href="#“宕机”" class="headerlink" title="“宕机”"></a>“宕机”</h4><p>服务器启动后迅速宕机</p><p>问题排查</p><ol><li><p>请求数量较高</p></li><li><p>主从之间数据吞吐量较大，数据同步操作频度较高</p></li></ol><p>解决方案</p><p>前置准备工作：</p><ol><li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li><li>利用LRU数据删除策略，构建数据留存队列 （例如：storm与kafka配合 ）</li></ol><p>准备工作：</p><ol><li><p>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</p></li><li><p>利用分布式多服务器同时进行数据读取，提速数据加载过程</p></li><li><p>热点数据主从同时预热 </p></li></ol><p>实施：</p><ol><li><p>使用脚本程序固定触发数据预热过程</p></li><li><p>如果条件允许，使用了CDN（内容分发网络），效果会更好</p></li></ol><p>总结</p><p>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="数据库服务器崩溃（1）"><a href="#数据库服务器崩溃（1）" class="headerlink" title="数据库服务器崩溃（1）"></a>数据库服务器崩溃（1）</h4><ol><li><p>系统平稳运行过程中，忽然数据库连接量激增</p></li><li><p>应用服务器无法及时处理请求</p></li><li><p>大量408，500错误页面出现</p></li><li><p>客户反复刷新页面获取数据</p></li><li><p>数据库崩溃</p></li><li><p>应用服务器崩溃</p></li><li><p>重启应用服务器无效</p></li><li><p>Redis服务器崩溃</p></li><li><p>Redis集群崩溃</p></li><li><p>重启数据库后再次被瞬间流量放倒</p></li></ol><p>问题排查</p><ol><li>在一个较短的时间内，缓存中较多的key集中过期</li><li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</li><li>数据库同时接收到大量的请求无法及时处理</li><li>Redis大量请求被积压，开始出现超时现象</li><li>数据库流量激增，数据库崩溃</li><li>重启后仍然面对缓存中无数据可用</li><li>Redis服务器资源被严重占用，Redis服务器崩溃</li><li>Redis集群呈现崩塌，集群瓦解</li><li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li><li>应用服务器，redis，数据库全部重启，效果不理想</li></ol><p>问题分析</p><ul><li>短时间范围内</li><li>大量key集中过期</li></ul><p>解决方案（道）</p><ol><li>更多的页面静态化处理</li><li>构建多级缓存架构 <ol><li>Nginx缓存+redis缓存+ehcache缓存</li></ol></li><li>检测Mysql严重耗时业务进行优化 <ol><li>对数据库的瓶颈排查：例如超时查询、耗时较高事务等</li></ol></li><li>灾难预警机制 监控redis服务器性能指标<ol><li>CPU占用、CPU使用率</li><li>内存容量</li><li>查询平均响应时间</li><li>线程数</li></ol></li><li>限流、降级 <ol><li>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</li></ol></li></ol><p>解决方案（术）</p><ol><li><p>LRU与LFU切换</p></li><li><p>数据有效期策略调整</p><ol><li>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</li><li>过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</li></ol></li><li><p>超热数据使用永久key</p></li><li><p>定期维护（自动+人工） </p><ol><li>对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</li></ol></li><li><p>加锁 </p><ol><li>慎用！</li></ol></li></ol><p>总结</p><p>缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/14_%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20210811230048399.png" alt="image-20210811230048399"></p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="数据库服务器崩溃（2）"><a href="#数据库服务器崩溃（2）" class="headerlink" title="数据库服务器崩溃（2）"></a>数据库服务器崩溃（2）</h4><ol><li><p>系统平稳运行过程中</p></li><li><p>数据库连接量瞬间激增</p></li><li><p>Redis服务器无大量key过期</p></li><li><p>Redis内存平稳，无波动</p></li><li><p>Redis服务器CPU正常</p></li><li><p>数据库崩溃</p></li></ol><p>问题排查</p><ol><li><p>Redis中某个key过期，该key访问量巨大</p></li><li><p>多个数据请求从服务器直接压到Redis后，均未命中</p></li><li><p>Redis在短时间内发起了大量对数据库中同一数据的访问</p></li></ol><p>问题分析</p><ul><li>单个key高热数据</li><li>key过期</li></ul><p>解决方案（术）</p><ol><li><p>预先设定 以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长 注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</p></li><li><p>现场调整 监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</p></li><li><p>后台刷新数据 启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</p></li><li><p>二级缓存 设置不同的失效时间，保障不会被同时淘汰就行</p></li><li><p>加锁 分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</p></li></ol><p>总结</p><p>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="数据库服务器崩溃（3）"><a href="#数据库服务器崩溃（3）" class="headerlink" title="数据库服务器崩溃（3）"></a>数据库服务器崩溃（3）</h4><ol><li><p>系统平稳运行过程中</p></li><li><p>应用服务器流量随时间增量较大</p></li><li><p>Redis服务器命中率随时间逐步降低</p></li><li><p>Redis内存平稳，内存无压力</p></li><li><p>Redis服务器CPU占用激增</p></li><li><p>数据库服务器压力激增</p></li><li><p>数据库崩溃</p></li></ol><p>问题排查</p><ol><li><p>Redis中大面积出现未命中</p></li><li><p>出现非正常URL访问</p></li></ol><p>问题分析</p><ul><li><p>获取的数据在数据库中也不存在，数据库查询未得到对应数据</p></li><li><p>Redis获取到null数据未进行持久化，直接返回</p></li><li><p>下次此类数据到达重复上述过程</p></li><li><p>出现黑客攻击服务器</p></li></ul><p>解决方案（术）</p><ol><li><p>缓存null 对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</p></li><li><p>白名单策略</p><ol><li>提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）</li><li>使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li></ol></li><li><p>实施监控 </p><ol><li>实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比<ol><li>非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</li><li>活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象 </li></ol></li><li>根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li></ol></li><li><p>key加密 问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验 例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</p></li></ol><p>总结</p><p>缓存击穿访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。<br>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p><h3 id="性能指标监控"><a href="#性能指标监控" class="headerlink" title="性能指标监控"></a>性能指标监控</h3><p>监控指标</p><ul><li>性能指标：Performance</li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>latency</td><td>Redis相应一个请求的时间</td></tr><tr><td>instantaneous_ops_per_sec</td><td>平均每秒处理请求总数</td></tr><tr><td>hit rate(calculated)</td><td>缓存命中率（计算出来的）</td></tr></tbody></table><ul><li>内存指标：Memory</li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>used_memory</td><td>已使用内存</td></tr><tr><td>mem_fragmentation_ratio</td><td>内存碎片率</td></tr><tr><td>evicted_keys</td><td>由于最大内存限制被移除的key的数量</td></tr><tr><td>blocked_clients</td><td>由于BLPOP, BRPOP, or BRPOPLPUSH而被阻塞的客户端</td></tr></tbody></table><ul><li>基本活动指标：Basic activity</li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>connected_clients</td><td>客户端连接数</td></tr><tr><td>connected_slaves</td><td>Slave数量</td></tr><tr><td>master_last_io_second_ago</td><td>最近一次主从交互之后的秒数</td></tr><tr><td>keyspace</td><td>数据库中的key值总数</td></tr></tbody></table><ul><li>持久性指标：Persistence</li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rdb_last_save_time</td><td>最后一次持久化保存到磁盘的时间戳</td></tr><tr><td>rdb_changes_since_last_save</td><td>自最后一次持久化以来数据库的更改数</td></tr></tbody></table><ul><li>错误指标：Error</li></ul><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rejected_connections</td><td>由于达到maxclient限制而被拒绝的连接数</td></tr><tr><td>keyspace_misses</td><td>Key值查找失败（没有命中）次数</td></tr><tr><td>master_link_down_since_seconds</td><td>主从断开的持续时间（以秒为单位）</td></tr></tbody></table><h4 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h4><ul><li>工具<ul><li>Cloud Insight Redis</li><li>Prometheus</li><li>Redis-stat</li><li>Redis-faina</li><li>RedisLive</li><li>zabbix</li></ul></li><li>命令<ul><li>benchmark</li><li>redis cli<ul><li>monitor</li><li>showlog</li></ul></li></ul></li></ul><h4 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h4><ul><li>命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]</span><br></pre></td></tr></table></figure><ul><li>范例1 说明：50个连接，10000次请求对应的性能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark</span><br></pre></td></tr></table></figure><ul><li>范例2 说明：100个连接，5000次请求对应的性能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark -c 100 -n 5000</span><br></pre></td></tr></table></figure><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/14_%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20210811232302733.png" alt="image-20210811232302733"></p><h4 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h4><ul><li>命令  打印服务器调试信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">monitor</span><br></pre></td></tr></table></figure><h4 id="showlong"><a href="#showlong" class="headerlink" title="showlong"></a>showlong</h4><ul><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showlong [operator]</span><br></pre></td></tr></table></figure><ul><li>get ：获取慢查询日志</li><li>len ：获取慢查询日志条目数</li><li>reset ：重置慢查询日志</li></ul></li><li><p>相关配置</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙 </span><br><span class="line">slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;缓存预热&quot;&gt;&lt;a href=&quot;#缓存预热&quot; class=&quot;headerlink&quot; title=&quot;缓存预热&quot;&gt;&lt;/a&gt;缓存预热&lt;/h3&gt;&lt;h4 id=&quot;“宕机”&quot;&gt;&lt;a href=&quot;#“宕机”&quot; class=&quot;headerlink&quot; title=&quot;“宕机”&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>13_cluster</title>
    <link href="http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/"/>
    <id>http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/</id>
    <published>2021-08-14T07:56:23.000Z</published>
    <updated>2021-08-14T08:00:31.068Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集群简介"><a href="#集群简介" class="headerlink" title="集群简介"></a>集群简介</h3><h4 id="现状问题"><a href="#现状问题" class="headerlink" title="现状问题"></a>现状问题</h4><p>业务发展过程中遇到的峰值瓶颈</p><ul><li>redis提供的服务OPS可以达到10万/秒，当前业务OPS已经达到10万/秒</li><li>内存单机容量达到256G，当前业务需求内存容量1T</li><li>使用集群的方式可以快速解决上述问题</li></ul><h4 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h4><ul><li>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</li></ul><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/image-20210811194159866.png" alt="image-20210811194159866"></p><h4 id="集群作用"><a href="#集群作用" class="headerlink" title="集群作用"></a>集群作用</h4><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/image-20210811194230583.png" alt="image-20210811194230583"></p><h3 id="Redis集群结构设计"><a href="#Redis集群结构设计" class="headerlink" title="Redis集群结构设计"></a>Redis集群结构设计</h3><h4 id="数据存储设计"><a href="#数据存储设计" class="headerlink" title="数据存储设计"></a>数据存储设计</h4><ul><li>通过算法设计，计算出key应该保存的位置</li><li>将所有的存储空间计划切割成16384份，每台主机保存一部分 <ul><li>每份代表的是一个存储空间，不是一个key的保存空间</li></ul></li><li>将key按照计算出的结果放到对应的存储空间</li></ul><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/image-20210811194452995.png" alt="image-20210811194452995" style="zoom:80%;"><ul><li>增强可扩展性</li></ul><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/image-20210812092258054.png" alt="image-20210812092258054" style="zoom:50%;"><h4 id="集群内部通讯设计"><a href="#集群内部通讯设计" class="headerlink" title="集群内部通讯设计"></a>集群内部通讯设计</h4><ul><li>各个数据库相互通信，保存各个库中槽的编号数据</li><li>一次命中，直接返回</li><li>一次未命中，告知具体位置</li></ul><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/13_cluster/image-20210811213351770.png" alt="image-20210811213351770"></p><h3 id="cluster集群结构搭建-没认真看"><a href="#cluster集群结构搭建-没认真看" class="headerlink" title="cluster集群结构搭建(没认真看)"></a>cluster集群结构搭建(没认真看)</h3><h4 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h4><ul><li>原生安装（单条命令）<ul><li>配置服务器（3主3从）</li><li>建立通信（Meet）</li><li>分槽（Slot）</li><li>搭建主从（master-slave）</li></ul></li><li>工具安装（批处理）</li></ul><h4 id="Cluster配置"><a href="#Cluster配置" class="headerlink" title="Cluster配置"></a>Cluster配置</h4><ul><li><p>添加节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-enabled yes|no</span><br></pre></td></tr></table></figure></li><li><p>cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cluster-config-file &lt;filename&gt;</span><br><span class="line">#cluster-config-file node-6379.conf</span><br></pre></td></tr></table></figure></li><li><p>节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-node-timeout &lt;milliseconds&gt;</span><br></pre></td></tr></table></figure></li><li><p>master连接的slave最小数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster-migration-barrier &lt;count&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Cluster节点操作命令"><a href="#Cluster节点操作命令" class="headerlink" title="Cluster节点操作命令"></a>Cluster节点操作命令</h4><ul><li><p>查看集群节点信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster nodes</span><br></pre></td></tr></table></figure></li><li><p>进入一个从节点 redis，切换其主节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster replicate &lt;master-id&gt;</span><br></pre></td></tr></table></figure></li><li><p>发现一个新节点，新增主节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster meet ip:port</span><br></pre></td></tr></table></figure></li><li><p>忽略一个没有solt的节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster forget &lt;id&gt;</span><br></pre></td></tr></table></figure></li><li><p>手动故障转移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cluster failover</span><br></pre></td></tr></table></figure></li></ul><h4 id="redis-trib命令"><a href="#redis-trib命令" class="headerlink" title="redis-trib命令"></a>redis-trib命令</h4><ul><li><p>添加节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb add-node</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb del-node  </span><br></pre></td></tr></table></figure></li><li><p>重新分片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-trib.rb reshard</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;集群简介&quot;&gt;&lt;a href=&quot;#集群简介&quot; class=&quot;headerlink&quot; title=&quot;集群简介&quot;&gt;&lt;/a&gt;集群简介&lt;/h3&gt;&lt;h4 id=&quot;现状问题&quot;&gt;&lt;a href=&quot;#现状问题&quot; class=&quot;headerlink&quot; title=&quot;现状问题&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>12_哨兵模式</title>
    <link href="http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-08-14T07:56:04.000Z</published>
    <updated>2021-08-14T07:59:32.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="哨兵简介"><a href="#哨兵简介" class="headerlink" title="哨兵简介"></a>哨兵简介</h3><h4 id="主机“宕机”"><a href="#主机“宕机”" class="headerlink" title="主机“宕机”"></a>主机“宕机”</h4><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810231753901.png" alt="image-20210810231753901"></p><ul><li>关闭master和所有slave</li><li>找一个slave作为master</li><li>修改其他slave的配置，连接新的主</li><li>启动新的master与slave</li><li>全量复制<em>N+部分复制</em>N</li><li>关闭期间的数据服务谁来承接？</li><li>找一个主？怎么找法？</li><li>修改配置后，原始的主恢复了怎么办？</li></ul><h4 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h4><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810231836936.png" alt="image-20210810231836936"></p><h4 id="哨兵的作用"><a href="#哨兵的作用" class="headerlink" title="哨兵的作用"></a>哨兵的作用</h4><ul><li>监控 <ul><li>不断的检查master和slave是否正常运行。 </li><li>master存活检测、master与slave运行情况检测</li></ul></li><li>通知（提醒） <ul><li>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</li></ul></li><li>自动故障转移 <ul><li>断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址 </li></ul></li></ul><blockquote><p>注意： 哨兵也是一台redis服务器，只是不提供数据服务 通常哨兵配置数量为单数</p></blockquote><h3 id="启用哨兵模式"><a href="#启用哨兵模式" class="headerlink" title="启用哨兵模式"></a>启用哨兵模式</h3><h4 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h4><ul><li><p>配置一拖二的主从结构</p></li><li><p>配置三个哨兵（配置相同，端口不同）</p><ul><li> 参看sentinel.conf</li></ul></li><li><p>启动哨兵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel sentinel-端口号.conf</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置项</th><th>范例</th><th>说明</th></tr></thead><tbody><tr><td>sentinel auth-pass &lt;服务器名称&gt; <password></password></td><td>sentinel auth-pass mymaster itcast</td><td>连接服务器口令</td></tr><tr><td>sentinel down-after-milliseconds &lt;自定义服务名称&gt;&lt;主机地址&gt;&lt;端口&gt;&lt;主从服务器总量&gt;</td><td>sentinel monitor mymaster 192.168.194.131 6381 1</td><td>设置哨兵监听的主服务器信息，最后的参数决定了最终参与选举的服务器数量（-1）</td></tr><tr><td>sentinel down-after-milliseconds&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td><td>sentinel down-after-milliseconds mymaster 3000</td><td>指定哨兵在监控Redis服务时，判定服务器挂掉的时间周期，默认30秒（30000），也是主从切换的启动条件之一</td></tr><tr><td>sentinel parallel-syncs&lt;服务名称&gt;&lt;服务器数（整数）&gt;</td><td>sentinel parallel-syncs mymaster 1</td><td>指定同时进行主从的slave数量，数值越大，要求网络资源越高，要求约小，同步时间约长</td></tr><tr><td>sentinel failover-timeout&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td><td>sentinel failover-timeout mymaster 9000</td><td>指定出现故障后，故障切换的最大超时时间，超过该值，认定切换失败，默认3分钟</td></tr><tr><td>sentinel notification-script&lt;服务名称&gt;&lt;脚本路径&gt;</td><td></td><td>服务器无法正常联通时，设定的执行脚本，通常调试使用。</td></tr></tbody></table></li></ul><h3 id="哨兵工作原理"><a href="#哨兵工作原理" class="headerlink" title="哨兵工作原理"></a>哨兵工作原理</h3><h4 id="主从切换"><a href="#主从切换" class="headerlink" title="主从切换"></a>主从切换</h4><ul><li>哨兵在进行主从切换过程中经历三个阶段<ul><li>监控</li><li>通知</li><li>故障转移</li></ul></li></ul><h4 id="阶段一：监控阶段"><a href="#阶段一：监控阶段" class="headerlink" title="阶段一：监控阶段"></a>阶段一：监控阶段</h4><ul><li>用于同步各个节点的状态信息<ul><li>获取各个sentinel的状态（是否在线）</li><li>获取master的状态<ul><li>master属性<ul><li>runid</li><li>role：master</li></ul></li><li>各个slave的详细信息</li></ul></li><li>获取所有slave的状态（根据master中的slave信息）<ul><li>slave属性<ul><li>runid</li><li>role：slave</li><li>master_host、master_port</li><li>offset</li><li>……</li></ul></li></ul></li></ul></li></ul><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810232400771.png" alt="image-20210810232400771"></p><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810232533492.png" alt="image-20210810232533492"></p><h4 id="阶段二：通知阶段"><a href="#阶段二：通知阶段" class="headerlink" title="阶段二：通知阶段"></a>阶段二：通知阶段</h4><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810232609739.png" alt="image-20210810232609739"></p><h4 id="阶段三：故障转移阶段"><a href="#阶段三：故障转移阶段" class="headerlink" title="阶段三：故障转移阶段"></a>阶段三：故障转移阶段</h4><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810232629953.png" alt="image-20210810232629953"></p><p><img src="/2021/08/14/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/12_%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/image-20210810232649354.png" alt="image-20210810232649354"></p><ul><li>服务器列表中挑选备选master<ul><li>在线的</li><li>响应慢的（pass）</li><li>与原master断开时间久的（pass）</li><li>优先原则<ul><li>优先级</li><li>offset</li><li>runid</li></ul></li></ul></li><li>发送指令（ sentinel ）<ul><li>向新的master发送slaveof no one</li><li>向其他slave发送slaveof 新masterIP端口</li></ul></li></ul><h4 id="主从切换总结"><a href="#主从切换总结" class="headerlink" title="主从切换总结"></a>主从切换总结</h4><ul><li>服务器列表中挑选备选master</li><li>在线的</li><li>响应慢的</li><li>与原master断开时间久的</li><li>优先原则<ul><li>优先级</li><li>offset</li><li>runid</li></ul></li></ul><h4 id="阶段三：故障转移阶段-1"><a href="#阶段三：故障转移阶段-1" class="headerlink" title="阶段三：故障转移阶段"></a>阶段三：故障转移阶段</h4><ul><li>监控<ul><li>同步信息</li></ul></li><li>通知<ul><li>保持联通</li></ul></li><li>故障转移<ul><li>发现问题</li><li>竞选负责人</li><li>优选新master</li><li>新master上任，其他slave切换master，原master作为slave故障回复后连接</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;哨兵简介&quot;&gt;&lt;a href=&quot;#哨兵简介&quot; class=&quot;headerlink&quot; title=&quot;哨兵简介&quot;&gt;&lt;/a&gt;哨兵简介&lt;/h3&gt;&lt;h4 id=&quot;主机“宕机”&quot;&gt;&lt;a href=&quot;#主机“宕机”&quot; class=&quot;headerlink&quot; title=&quot;主机“宕机</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>11_主从复制</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2021-08-04T10:07:30.000Z</published>
    <updated>2021-08-11T07:18:04.714Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主从复制简介"><a href="#主从复制简介" class="headerlink" title="主从复制简介"></a>主从复制简介</h3><h4 id="互联网“三高”架构"><a href="#互联网“三高”架构" class="headerlink" title="互联网“三高”架构"></a>互联网“三高”架构</h4><ul><li>高并发</li><li>高性能</li><li>高可用</li></ul><h4 id="你的“Redis”是否高可用"><a href="#你的“Redis”是否高可用" class="headerlink" title="你的“Redis”是否高可用"></a>你的“Redis”是否高可用</h4><p>单机redis的风险与问题</p><ul><li>问题1.机器故障<ul><li>现象：硬盘故障、系统崩溃</li><li>本质：数据丢失，很可能对业务造成灾难性打击</li><li>结论：基本上会放弃使用redis.</li></ul></li><li>问题2.容量瓶颈<ul><li>现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存</li><li>本质：穷，硬件条件跟不上</li><li>结论：放弃使用redis</li></ul></li><li>结论： <ul><li>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。</li></ul></li></ul><h4 id="多台服务器连接方案"><a href="#多台服务器连接方案" class="headerlink" title="多台服务器连接方案"></a>多台服务器连接方案</h4><ul><li>提供数据方：master <ul><li>主服务器，主节点，主库 </li><li>主客户端</li></ul></li><li>接收数据方：slave <ul><li>从服务器，从节点，从库 </li><li>从客户端</li></ul></li><li>需要解决的问题： <ul><li>数据同步</li></ul></li><li>核心工作： <ul><li>master的数据复制到slave中</li></ul></li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210803234445926.png" alt="image-20210803234445926"></p><h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>主从复制即将master中的数据即时、有效的复制到slave中 </p><p>特征：一个master可以拥有多个slave，一个slave只对应一个master</p><p> 职责：</p><ul><li>master:<ul><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave</li><li>读数据（可忽略）</li></ul></li><li>slave:<ul><li>读数据</li><li>写数据（禁止）</li></ul></li></ul><h4 id="高可用集群"><a href="#高可用集群" class="headerlink" title="高可用集群"></a>高可用集群</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210803234553228.png" alt="image-20210803234553228"></p><h4 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h4><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h3 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a>主从复制工作流程</h3><h4 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h4><ul><li>主从复制过程大体可以分为3个阶段</li><li>建立连接阶段（即准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段</li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210803234638928.png" alt="image-20210803234638928"></p><h4 id="阶段一：建立连接阶段"><a href="#阶段一：建立连接阶段" class="headerlink" title="阶段一：建立连接阶段"></a>阶段一：建立连接阶段</h4><ul><li>建立slave到master的连接，使master能够识别slave，并保存slave端口号</li></ul><h4 id="建立连接阶段工作流程"><a href="#建立连接阶段工作流程" class="headerlink" title="建立连接阶段工作流程"></a>建立连接阶段工作流程</h4><p>步骤1：设置master的地址和端口，保存master信息</p><p>步骤2：建立socket连接</p><p>步骤3：发送ping命令（定时器任务）</p><p>步骤4：身份验证</p><p>步骤5：发送slave端口信息</p><p>至此，主从连接成功！</p><p>状态：</p><p>slave：</p><p>​    保存master的地址与端口</p><p>master：</p><p>​    保存slave的端口</p><p>总体：</p><p>​    之间创建了连接的socket</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804094954296.png" alt="image-20210804094954296"></p><h4 id="主从连接（slave连接master）"><a href="#主从连接（slave连接master）" class="headerlink" title="主从连接（slave连接master）"></a>主从连接（slave连接master）</h4><ul><li><p>方式一：客户端发送命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式二：启动服务器参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式三：服务器配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></li><li><p>slave系统信息</p><ul><li>master_link_down_since_seconds</li><li>masterhost</li><li>masterport</li></ul></li><li><p>master系统信息</p><ul><li>slave_listening_port(多个)</li></ul></li></ul><h4 id="主从断开连接"><a href="#主从断开连接" class="headerlink" title="主从断开连接"></a>主从断开连接</h4><ul><li><p>客户端发送命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof no one</span><br></pre></td></tr></table></figure></li><li><p>说明：</p><ul><li> slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</li></ul></li></ul><h4 id="授权访问"><a href="#授权访问" class="headerlink" title="授权访问"></a>授权访问</h4><ul><li><p>master客户端发送命令设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass &lt;password&gt;</span><br></pre></td></tr></table></figure></li><li><p>master配置文件设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config set requirepass &lt;password&gt; </span><br><span class="line">config get requirepass</span><br></pre></td></tr></table></figure></li><li><p>slave客户端发送命令设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth &lt;password&gt;</span><br></pre></td></tr></table></figure></li><li><p>slave配置文件设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth &lt;password&gt;</span><br></pre></td></tr></table></figure></li><li><p>slave启动服务器设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server –a &lt;password&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="阶段二：数据同步阶段工作流程"><a href="#阶段二：数据同步阶段工作流程" class="headerlink" title="阶段二：数据同步阶段工作流程"></a>阶段二：数据同步阶段工作流程</h4><ul><li>在slave初次连接master后，复制master中的所有数据到slave</li><li>将slave的数据库状态更新成master当前的数据库状态</li></ul><h4 id="数据同步阶段工作流程"><a href="#数据同步阶段工作流程" class="headerlink" title="数据同步阶段工作流程"></a>数据同步阶段工作流程</h4><p>步骤1：请求同步数据 </p><p>步骤2：创建RDB同步数据 </p><p>步骤3：恢复RDB同步数据 </p><p>步骤4：请求部分同步数据 </p><p>步骤5：恢复部分同步数据 至此，数据同步工作完成！ </p><p>状态： </p><p>slave： </p><p>​    具有master端全部数据，包含RDB过程接收的数据 </p><p>master： </p><p>​    保存slave当前数据同步的位置 </p><p>总体： 之间完成了数据克隆</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804100004054.png" alt="image-20210804100004054"></p><h4 id="数据同步阶段master说明"><a href="#数据同步阶段master说明" class="headerlink" title="数据同步阶段master说明"></a>数据同步阶段master说明</h4><ol><li><p>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size 1mb</span><br></pre></td></tr></table></figure></li><li><p>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执行bgsave命令和创建复制缓冲区</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804100121497.png" alt="image-20210804100121497"></p></li></ol><h4 id="数据同步阶段slave说明"><a href="#数据同步阶段slave说明" class="headerlink" title="数据同步阶段slave说明"></a>数据同步阶段slave说明</h4><ol><li><p>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure></li><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p></li><li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择</p></li></ol><h4 id="阶段三：命令传播阶段"><a href="#阶段三：命令传播阶段" class="headerlink" title="阶段三：命令传播阶段"></a>阶段三：命令传播阶段</h4><ul><li>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</li><li>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</li><li>主从复制过程大体可以分为3个阶段<ul><li>建立连接阶段（即准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段</li></ul></li></ul><h4 id="命令传播阶段的部分复制"><a href="#命令传播阶段的部分复制" class="headerlink" title="命令传播阶段的部分复制"></a>命令传播阶段的部分复制</h4><ul><li>命令传播阶段出现了断网现象<ul><li>网络闪断闪连          忽略</li><li>短时间网络中断      部分复制</li><li>长时间网络中断      全量复制</li></ul></li><li>部分复制的三个核心要素<ul><li>服务器的运行 id（run id）</li><li>主服务器的复制积压缓冲区</li><li>主从服务器的复制偏移量</li></ul></li></ul><h4 id="服务器运行ID（runid）"><a href="#服务器运行ID（runid）" class="headerlink" title="服务器运行ID（runid）"></a>服务器运行ID（runid）</h4><ul><li>概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</li><li>组成：运行id由40位字符组成，是一个随机的十六进制字符<ul><li>例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</li></ul></li><li>作用：运行id被用于在服务器间进行传输，识别身份 <ul><li>如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</li></ul></li><li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li></ul><h4 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h4><ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804100510720.png" alt="image-20210804100510720"></p><h4 id="复制缓冲区内部工作原理"><a href="#复制缓冲区内部工作原理" class="headerlink" title="复制缓冲区内部工作原理"></a>复制缓冲区内部工作原理</h4><ul><li>组成<ul><li>偏移量</li><li>字节值</li></ul></li><li>工作原理<ul><li>通过offset区分不同的slave当前数据传播的差异</li><li>master记录已发送的信息对应的offset</li><li>slave记录已接收的信息对应的offset</li></ul></li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804100811798.png" alt="复制缓冲区/复制积压缓冲区"></p><h4 id="复制缓冲区-1"><a href="#复制缓冲区-1" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h4><ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区<ul><li>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</li></ul></li><li>由来：每台服务器启动时，如果开启有AOF或被连接成为master节点，即创建复制缓冲区</li><li>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</li><li>数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</li></ul><p>主从服务器复制偏移量（offset）</p><ul><li>概念：一个数字，描述复制缓冲区中的指令字节位置</li><li>分类：<ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul></li><li>数据来源： <ul><li>master端：发送一次记录一次 </li><li>slave端：接收一次记录一次</li></ul></li><li>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</li></ul><h4 id="数据同步-命令传播阶段工作流程"><a href="#数据同步-命令传播阶段工作流程" class="headerlink" title="数据同步+命令传播阶段工作流程"></a>数据同步+命令传播阶段工作流程</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804101026777.png" alt="image-20210804101026777"></p><h4 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h4><ul><li>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</li><li>master心跳：<ul><li>指令：PING</li><li>周期：由repl-ping-slave-period决定，默认10秒</li><li>作用：判断slave是否在线</li><li>查询：INFO replication                获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</li></ul></li><li>slave心跳任务<ul><li>指令：REPLCONF ACK {offset}</li><li>周期：1秒</li><li>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li><li>作用2：判断master是否在线</li></ul></li></ul><h4 id="心跳阶段注意事项"><a href="#心跳阶段注意事项" class="headerlink" title="心跳阶段注意事项"></a>心跳阶段注意事项</h4><ul><li><p>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 2 </span><br><span class="line">min-slaves-max-lag 8</span><br></pre></td></tr></table></figure><ul><li>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</li></ul></li><li><p>slave数量由slave发送REPLCONF ACK命令做确认</p></li><li><p>slave延迟由slave发送REPLCONF ACK命令做确认</p></li></ul><h4 id="主从复制工作流程（完整）"><a href="#主从复制工作流程（完整）" class="headerlink" title="主从复制工作流程（完整）"></a>主从复制工作流程（完整）</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/11_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/image-20210804101308938.png" alt="image-20210804101308938"></p><h3 id="主从复制常见问题"><a href="#主从复制常见问题" class="headerlink" title="主从复制常见问题"></a>主从复制常见问题</h3><h4 id="频繁的全量复制（1）"><a href="#频繁的全量复制（1）" class="headerlink" title="频繁的全量复制（1）"></a>频繁的全量复制（1）</h4><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作 内部优化调整方案：</p><ol><li><p>master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</p></li><li><p>在master关闭时执行命令 shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中</p><ul><li>repl-id repl-offset</li><li>通过redis-check-rdb命令可以查看该信息</li></ul></li><li><p>master重启后加载RDB文件，恢复数据 重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中</p><ul><li>master_repl_id = repl master_repl_offset = repl-offset</li><li>通过info命令可以查看该信息 </li></ul></li></ol><p>作用： 本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</p><h4 id="频繁的全量复制（2）"><a href="#频繁的全量复制（2）" class="headerlink" title="频繁的全量复制（2）"></a>频繁的全量复制（2）</h4><ul><li><p>问题现象</p><ul><li>网络环境不佳，出现网络中断，slave不提供服务</li></ul></li><li><p>问题原因</p><ul><li>复制缓冲区过小，断网后slave的offset越界，触发全量复制</li></ul></li><li><p>最终结果</p><ul><li>slave反复进行全量复制</li></ul></li><li><p>解决方案</p><ul><li><p>修改复制缓冲区大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size</span><br></pre></td></tr></table></figure></li></ul></li><li><p>建议设置如下：</p><ol><li>测算从master到slave的重连平均时长second</li><li>获取master平均每秒产生写命令数据总量write_size_per_second</li><li>最优复制缓冲区空间 = 2 * second * write_size_per_second</li></ol></li></ul><h4 id="频繁的网络中断（1）"><a href="#频繁的网络中断（1）" class="headerlink" title="频繁的网络中断（1）"></a>频繁的网络中断（1）</h4><ul><li><p>问题现象</p><ul><li>master的CPU占用过高 或 slave频繁断开连接</li></ul></li><li><p>问题原因</p><ul><li>slave每1秒发送REPLCONF ACK命令到master</li><li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li></ul></li><li><p>最终结果</p><ul><li>master各种资源（输出缓冲区、带宽、连接等）被严重占用</li></ul></li><li><p>解决方案</p><ul><li><p>通过设置合理的超时时间，确认是否释放slave </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-timeout</span><br></pre></td></tr></table></figure></li><li><p>该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</p></li></ul></li></ul><h4 id="频繁的网络中断（2）"><a href="#频繁的网络中断（2）" class="headerlink" title="频繁的网络中断（2）"></a>频繁的网络中断（2）</h4><ul><li><p>问题现象</p><ul><li>slave与master连接断开</li></ul></li><li><p>问题原因</p><ul><li>master发送ping指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul></li><li><p>解决方案</p><ul><li><p>提高ping指令发送的频度 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-ping-slave-period</span><br></pre></td></tr></table></figure></li><li><p>超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时</p></li></ul></li></ul><h4 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h4><ul><li><p>问题现象</p><ul><li>多个slave获取相同数据不同步</li></ul></li><li><p>问题原因</p><ul><li>网络信息不同步，数据发送有延迟</li></ul></li><li><p>解决方案</p><ul><li><p>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象</p></li><li><p>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data yes|no</span><br></pre></td></tr></table></figure></li><li><p>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;主从复制简介&quot;&gt;&lt;a href=&quot;#主从复制简介&quot; class=&quot;headerlink&quot; title=&quot;主从复制简介&quot;&gt;&lt;/a&gt;主从复制简介&lt;/h3&gt;&lt;h4 id=&quot;互联网“三高”架构&quot;&gt;&lt;a href=&quot;#互联网“三高”架构&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>10_高级数据类型</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-04T10:07:15.000Z</published>
    <updated>2021-08-10T05:58:30.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>公司的年度总结会</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233202695.png" alt="image-20210802233202695"></p><p>公司的年度总结会第二天</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233219570.png" alt="image-20210802233219570"></p><h4 id="存储需求"><a href="#存储需求" class="headerlink" title="存储需求"></a>存储需求</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233232505.png" alt="image-20210802233232505"></p><h4 id="Bitmaps类型的基础操作"><a href="#Bitmaps类型的基础操作" class="headerlink" title="Bitmaps类型的基础操作"></a>Bitmaps类型的基础操作</h4><ul><li><p>获取指定key对应偏移量上的bit值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure></li><li><p>设置指定key对应偏移量上的bit值，value只能是1或0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure></li></ul><h4 id="Bitmaps类型的扩展操作"><a href="#Bitmaps类型的扩展操作" class="headerlink" title="Bitmaps类型的扩展操作"></a>Bitmaps类型的扩展操作</h4><p><strong>业务场景</strong></p><p>电影网站</p><ul><li>统计每天某一部电影是否被点播</li><li>统计每天有多少部电影被点播</li><li>统计每周/月/年有多少部电影被点播</li><li>统计年度哪部电影没有被点播</li></ul><p><strong>业务分析</strong></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233457545.png" alt="image-20210802233457545"></p><ul><li><p>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitop op destKey key1 [key2...]</span><br></pre></td></tr></table></figure><ul><li><p>and：交</p></li><li><p>or：并</p></li><li><p>not：非</p></li><li><p>xor：异或</p></li></ul></li></ul><ul><li><p>统计指定key中1的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount key [start end]</span><br></pre></td></tr></table></figure></li></ul><p>Tips 21：</p><ul><li>redis 应用于信息状态统计</li></ul><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="统计独立UV"><a href="#统计独立UV" class="headerlink" title="统计独立UV"></a>统计独立UV</h4><ul><li>原始方案：set<ul><li>存储每个用户的id（字符串）</li></ul></li><li>改进方案：Bitmaps<ul><li>存储每个用户状态（bit）</li></ul></li><li>全新的方案：Hyperloglog</li></ul><h4 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h4><ul><li>基数是数据集去重后元素个数</li><li>HyperLogLog 是用来做基数统计的，运用了LogLog的算法</li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233916785.png" alt="image-20210802233916785"></p><h4 id="LogLog算法"><a href="#LogLog算法" class="headerlink" title="LogLog算法"></a>LogLog算法</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/10_%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210802233931775.png" alt="image-20210802233931775"></p><h4 id="HyperLogLog类型的基本操作"><a href="#HyperLogLog类型的基本操作" class="headerlink" title="HyperLogLog类型的基本操作"></a>HyperLogLog类型的基本操作</h4><ul><li><p>添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfadd key element [element ...]</span><br></pre></td></tr></table></figure></li><li><p>统计数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfcount key [key ...]</span><br></pre></td></tr></table></figure></li><li><p>合并数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pfmerge destkey sourcekey [sourcekey...]</span><br></pre></td></tr></table></figure></li></ul><p>Tips 22：</p><ul><li>redis 应用于独立信息统计</li></ul><h4 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h4><ul><li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据</li><li>核心是基数估算算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值</li><li>耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li>pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大</li><li>Pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量多少</li></ul><h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><h4 id="火热的生活服务类软件"><a href="#火热的生活服务类软件" class="headerlink" title="火热的生活服务类软件"></a>火热的生活服务类软件</h4><ul><li>微信 / 陌陌</li><li>美团 / 饿了么</li><li>携程 / 马蜂窝</li><li>高德 / 百度</li><li>……</li></ul><h4 id="GEO类型的基本操作"><a href="#GEO类型的基本操作" class="headerlink" title="GEO类型的基本操作"></a>GEO类型的基本操作</h4><ul><li><p>添加坐标点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure></li><li><p>获取坐标点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geopos key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p>计算坐标点距离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geodist key member1 member2 [unit]</span><br></pre></td></tr></table></figure></li><li><p>添加坐标点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure></li><li><p>获取坐标点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</span><br></pre></td></tr></table></figure></li><li><p>计算经纬度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohash key member [member ...]</span><br></pre></td></tr></table></figure></li></ul><p>Tips 23：</p><ul><li>redis 应用于地理位置计算</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Bitmaps&quot;&gt;&lt;a href=&quot;#Bitmaps&quot; class=&quot;headerlink&quot; title=&quot;Bitmaps&quot;&gt;&lt;/a&gt;Bitmaps&lt;/h3&gt;&lt;p&gt;公司的年度总结会&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/08/04/%E9%BB%91%E9</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>09_redis服务器配置</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/09_redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/09_redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2021-08-04T10:07:01.000Z</published>
    <updated>2021-08-10T01:44:10.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器基础配置"><a href="#服务器基础配置" class="headerlink" title="服务器基础配置"></a>服务器基础配置</h3><h4 id="服务器端设定"><a href="#服务器端设定" class="headerlink" title="服务器端设定"></a>服务器端设定</h4><ul><li><p>设置服务器以守护进程的方式运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes|no</span><br></pre></td></tr></table></figure></li><li><p>绑定主机地址（只能通过该ip访问）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>设置服务器端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure></li><li><p>设置数据库数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure></li></ul><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><ul><li><p>设置服务器以指定日志记录级别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loglevel debug|verbose|notice|warning</span><br></pre></td></tr></table></figure></li><li><p>日志记录文件名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logfile 端口号.log</span><br></pre></td></tr></table></figure></li></ul><p>注意：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度</p><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><ul><li><p>设置同一时间最大客户端连接数，默认无限制。当客户端连接到达上限，Redis会关闭新的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxclients 0</span><br></pre></td></tr></table></figure></li><li><p>客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭该功能，设置为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeout 300</span><br></pre></td></tr></table></figure></li></ul><h4 id="多服务器快捷配置"><a href="#多服务器快捷配置" class="headerlink" title="多服务器快捷配置"></a>多服务器快捷配置</h4><ul><li><p>导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /path/server-端口号.conf</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;服务器基础配置&quot;&gt;&lt;a href=&quot;#服务器基础配置&quot; class=&quot;headerlink&quot; title=&quot;服务器基础配置&quot;&gt;&lt;/a&gt;服务器基础配置&lt;/h3&gt;&lt;h4 id=&quot;服务器端设定&quot;&gt;&lt;a href=&quot;#服务器端设定&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>08_删除策略</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/</id>
    <published>2021-08-04T10:06:41.000Z</published>
    <updated>2021-08-10T01:36:41.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过期数据"><a href="#过期数据" class="headerlink" title="过期数据"></a>过期数据</h3><h4 id="Redis中的数据特征"><a href="#Redis中的数据特征" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h4><ul><li>Redis是一种内存级数据库，所有数据均存放在内存中，内存中的数据可以通过TTL指令获取其状态<ul><li>XX ：具有时效性的数据</li><li>-1 ：永久有效的数据</li><li>-2 ：已经过期的数据 或 被删除的数据 或 未定义的数据</li></ul></li></ul><p>过期的数据真的删除了吗？</p><h4 id="Redis中的数据特征-1"><a href="#Redis中的数据特征-1" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20210801232952082.png" alt="image-20210801232952082"></p><h4 id="数据删除策略"><a href="#数据删除策略" class="headerlink" title="数据删除策略"></a>数据删除策略</h4><ol><li><p>定时删除</p></li><li><p>惰性删除</p></li><li><p>定期删除</p></li></ol><h3 id="数据删除策略-1"><a href="#数据删除策略-1" class="headerlink" title="数据删除策略"></a>数据删除策略</h3><h4 id="时效性数据的存储结构"><a href="#时效性数据的存储结构" class="headerlink" title="时效性数据的存储结构"></a>时效性数据的存储结构</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20210801233041559.png" alt="image-20210801233041559"></p><h4 id="数据删除策略的目标"><a href="#数据删除策略的目标" class="headerlink" title="数据删除策略的目标"></a>数据删除策略的目标</h4><p>在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或内存泄露</p><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h4><ul><li><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</p></li><li><p>优点：节约内存，到时就删除，快速释放掉不必要的内存占用</p></li><li><p>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p></li><li><p>总结：用处理器性能换取存储空间（拿时间换空间）</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20210801233333017.png" alt="image-20210801233333017"></p></li></ul><h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><ul><li>数据到达过期时间，不做处理。等下次访问该数据时<ul><li>如果未过期，返回数据</li><li>发现已过期，删除，返回不存在</li></ul></li><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li><li>总结：用存储空间换取处理器性能（拿时间换空间）</li><li><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20210801233425793.png" alt="image-20210801233425793"></li></ul><h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p><strong>两种方案都走极端，有没有折中方案？</strong></p><ul><li><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p></li><li><p>每秒钟执行server.hz次serverCron()–&gt;(databasesCron()–&gt;(activeExpireCycle()))</p></li><li><p>activeExpireCycle()对每个expires[*]逐一进行检测，每次执行250ms/server.hz</p></li><li><p>对某个expires[<em>]检测时，随机挑选W个key检测</em></p><ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程*</li><li>如果一轮中删除的key的数量≤W*25%，检查下一个expires[*]，0-15循环</li><li>W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul></li><li><p>参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行</p></li><li><p>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行</p></li><li><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/08_%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20210801233559062.png" alt="image-20210801233559062"></p></li><li><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p></li><li><p>特点1：CPU性能占用设置有峰值，检测频度可自定义设置</p></li><li><p>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</p></li><li><p>总结：周期性抽查存储空间（随机抽查，重点抽查）</p></li></ul><h4 id="删除策略比对"><a href="#删除策略比对" class="headerlink" title="删除策略比对"></a>删除策略比对</h4><ol><li>定时删除<ol><li>节约内存，无占用</li><li>不分时段占用CPU资源，频度高</li><li>拿时间换空间</li></ol></li><li>惰性删除<ol><li>内存占用严重</li><li>延时执行，CPU利用率高</li><li>拿空间换时间</li></ol></li><li>定期删除<ol><li>内存定期随机清理</li><li>每秒花费固定的CPU资源维护内存</li><li>随机抽查，重点抽查</li></ol></li></ol><h3 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h3><h4 id="新数据进入检测"><a href="#新数据进入检测" class="headerlink" title="新数据进入检测"></a>新数据进入检测</h4><p><strong>当新数据进入redis时，如果内存不足怎么办？</strong></p><ul><li><p>Redis使用内存存储数据，在执行每一个命令前，会调用freeMemoryIfNeeded()检测内存是否充足。如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。</p></li><li><p>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(error) OOM command not allowed when used memory &gt;&#x27;maxmemory&#x27;</span><br></pre></td></tr></table></figure></li></ul><h4 id="影响数据逐出的相关配置"><a href="#影响数据逐出的相关配置" class="headerlink" title="影响数据逐出的相关配置"></a>影响数据逐出的相关配置</h4><ul><li><p>最大可使用内存 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory</span><br></pre></td></tr></table></figure><ul><li>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</li></ul></li><li><p>每次选取待删除数据的个数 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples</span><br></pre></td></tr></table></figure><ul><li>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</li></ul></li><li><p>删除策略 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy</span><br></pre></td></tr></table></figure><ul><li>达到最大内存后的，对被挑选出来的数据进行删除的策略</li></ul></li><li><p>检测易失数据（可能会过期的数据集server.db[i].expires ）</p><ul><li>① volatile-lru：挑选最近最长时间没有使用的数据淘汰    Least Recently Used</li><li>② volatile-lfu：挑选最近使用次数最少的数据淘汰    Least Frequently Used</li><li>③ volatile-ttl：挑选将要过期的数据淘汰</li><li>④ volatile-random：任意选择数据淘汰</li></ul></li><li><p>检测全库数据（所有数据集server.db[i].dict ）</p><ul><li>⑤ allkeys-lru：挑选最近最少使用的数据淘汰</li><li>⑥ allkeys-lfu：挑选最近使用次数最少的数据淘汰</li><li>⑦ allkeys-random：任意选择数据淘汰</li></ul></li><li><p>放弃数据驱逐</p><ul><li><p>⑧ no-enviction（驱逐）：禁止驱逐数据（redis4.0中默认策略），会引发错误OOM（Out Of Memory）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据逐出策略配置依据"><a href="#数据逐出策略配置依据" class="headerlink" title="数据逐出策略配置依据"></a>数据逐出策略配置依据</h4><ul><li>使用INFO命令输出监控信息，查询缓存 hit 和 miss 的次数，根据业务需求调优Redis配置</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;过期数据&quot;&gt;&lt;a href=&quot;#过期数据&quot; class=&quot;headerlink&quot; title=&quot;过期数据&quot;&gt;&lt;/a&gt;过期数据&lt;/h3&gt;&lt;h4 id=&quot;Redis中的数据特征&quot;&gt;&lt;a href=&quot;#Redis中的数据特征&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/07_redis%E4%BA%8B%E5%8A%A1/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/07_redis%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-08-04T10:06:24.169Z</published>
    <updated>2021-08-10T01:04:36.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><h3 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h3><h4 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h4><p><strong>Redis执行指令过程中，多条连续执行的指令被干扰，打断，插队</strong></p><p>redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）。当执行时，一次性按照添加顺序依次执行，中间不会被打断或者干扰。</p><p>一个队列中，一次性、顺序性、排他性的执行一系列命令</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/07_redis%E4%BA%8B%E5%8A%A1/image-20210801000414947.png" alt="image-20210801000414947"></p><h3 id="事务基本操作"><a href="#事务基本操作" class="headerlink" title="事务基本操作"></a>事务基本操作</h3><h4 id="事务的边界"><a href="#事务的边界" class="headerlink" title="事务的边界"></a>事务的边界</h4><h4 id="事务的基本操作"><a href="#事务的基本操作" class="headerlink" title="事务的基本操作"></a>事务的基本操作</h4><ul><li><p>开启事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</li></ul></li><li><p>执行事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>设定事务的结束位置，同时执行事务。与multi成对出现，成对使用 </li></ul></li></ul><blockquote><p>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行exec命令才开始执行</p></blockquote><p><strong>事务定义过程中发现出了问题，怎么办？</strong></p><ul><li><p>取消事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure></li><li><p>作用</p><ul><li> 终止当前事务的定义，发生在multi之后，exec之前</li></ul></li></ul><h4 id="事务的工作流程"><a href="#事务的工作流程" class="headerlink" title="事务的工作流程"></a>事务的工作流程</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/07_redis%E4%BA%8B%E5%8A%A1/image-20210801000649399.png" alt="image-20210801000649399"></p><h4 id="事务的注意事项"><a href="#事务的注意事项" class="headerlink" title="事务的注意事项"></a>事务的注意事项</h4><p><strong>定义事务的过程中，命令格式输入错误怎么办？</strong></p><ul><li>语法错误 <ul><li>指命令书写格式有误</li></ul></li><li>处理结果 <ul><li>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。</li></ul></li></ul><p><strong>定义事务的过程中，命令执行出现错误怎么办？</strong></p><ul><li>运行错误 <ul><li>指命令格式正确，但是无法正确的执行。例如对list进行incr操作</li></ul></li><li>处理结果 <ul><li>能够正确运行的命令会执行，运行错误的命令不会被执行</li></ul></li></ul><blockquote><p>注意：已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</p></blockquote><h3 id="手动进行事务回滚"><a href="#手动进行事务回滚" class="headerlink" title="手动进行事务回滚"></a>手动进行事务回滚</h3><ul><li>记录操作过程中被影响的数据之前的状态<ul><li>单数据：string</li><li>多数据：hash、list、set、zset</li></ul></li><li>设置指令恢复所有的被修改的项<ul><li>单数据：直接set（注意周边属性，例如时效）</li><li>多数据：修改对应值或整体克隆复制</li></ul></li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h4 id="基于特定条件的事务执行"><a href="#基于特定条件的事务执行" class="headerlink" title="基于特定条件的事务执行"></a>基于特定条件的事务执行</h4><p><strong>业务场景</strong></p><p>天猫双11热卖过程中，对已经售罄的货物追加补货，4个业务员都有权限进行补货。补货的操作可能是一系列的操作，牵扯到多个连续操作，如何保障不会重复操作？</p><p><strong>业务分析</strong></p><ul><li>多个客户端有可能同时操作同一组数据，并且该数据一旦被操作修改后，将不适用于继续操作</li><li>在操作之前锁定要操作的数据，一旦发生变化，终止当前操作</li></ul><h4 id="基于特定条件的事务执行——锁"><a href="#基于特定条件的事务执行——锁" class="headerlink" title="基于特定条件的事务执行——锁"></a>基于特定条件的事务执行——锁</h4><p><strong>解决方案</strong></p><ul><li><p>对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch key1 [key2……]</span><br></pre></td></tr></table></figure></li><li><p>取消对所有 key 的监视</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unwatch</span><br></pre></td></tr></table></figure></li></ul><p>Tips 18：</p><ul><li>redis 应用基于状态控制的批量任务执行</li></ul><h4 id="基于特定条件的事务执行-1"><a href="#基于特定条件的事务执行-1" class="headerlink" title="基于特定条件的事务执行"></a>基于特定条件的事务执行</h4><p><strong>业务场景</strong></p><p>天猫双11热卖过程中，对已经售罄的货物追加补货，且补货完成。客户购买热情高涨，3秒内将所有商品购买完毕。本次补货已经将库存全部清空，如何避免最后一件商品不被多人同时购买？【超卖问题】</p><p><strong>业务分析</strong></p><ul><li>使用watch监控一个key有没有改变已经不能解决问题，此处要监控的是具体数据</li><li>虽然redis是单线程的，但是多个客户端对同一数据同时进行操作时，如何避免不被同时修改？</li></ul><h4 id="基于特定条件的事务执行——分布式锁"><a href="#基于特定条件的事务执行——分布式锁" class="headerlink" title="基于特定条件的事务执行——分布式锁"></a>基于特定条件的事务执行——分布式锁</h4><p><strong>解决方案</strong></p><ul><li><p>使用 setnx 设置一个公共锁 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx lock-key value</span><br></pre></td></tr></table></figure></li><li><p>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</p><ul><li>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</li><li>对于返回设置失败的，不具有控制权，排队或等待 </li></ul></li><li><p>操作完毕通过del操作释放锁</p></li></ul><blockquote><p> 注意：上述解决方案是一种设计概念，依赖规范保障，具有风险性</p></blockquote><p>Tips 19：</p><ul><li>redis 应用基于分布式锁对应的场景控制</li></ul><h4 id="基于特定条件的事务执行-2"><a href="#基于特定条件的事务执行-2" class="headerlink" title="基于特定条件的事务执行"></a>基于特定条件的事务执行</h4><p>业务场景</p><p>依赖分布式锁的机制，某个用户操作时对应客户端宕机，且此时已经获取到锁。如何解决？</p><p><strong>业务分析</strong></p><ul><li>由于锁操作由用户控制加锁解锁，必定会存在加锁后未解锁的风险</li><li>需要解锁操作不能仅依赖用户控制，系统级别要给出对应的保底处理方案</li></ul><h4 id="基于特定条件的事务执行——分布式锁改良"><a href="#基于特定条件的事务执行——分布式锁改良" class="headerlink" title="基于特定条件的事务执行——分布式锁改良"></a>基于特定条件的事务执行——分布式锁改良</h4><p><strong>解决方案</strong></p><ul><li><p>使用 expire 为锁key添加时间限定，到时不释放，放弃锁 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expire lock-key second </span><br><span class="line">pexpire lock-key milliseconds</span><br></pre></td></tr></table></figure></li></ul><p>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。</p><ul><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时</li><li>锁时间设定推荐：最大耗时<em>120%+平均网络延迟</em>110%</li><li>如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可</li></ul><h3 id="redssion"><a href="#redssion" class="headerlink" title="redssion"></a>redssion</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis-事务&quot;&gt;&lt;a href=&quot;#Redis-事务&quot; class=&quot;headerlink&quot; title=&quot;Redis 事务&quot;&gt;&lt;/a&gt;Redis 事务&lt;/h2&gt;&lt;h3 id=&quot;事务简介&quot;&gt;&lt;a href=&quot;#事务简介&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>06_redis持久化</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2021-08-04T10:05:49.000Z</published>
    <updated>2021-08-08T12:50:50.442Z</updated>
    
    <content type="html"><![CDATA[<h3 id="持久化简介"><a href="#持久化简介" class="headerlink" title="持久化简介"></a>持久化简介</h3><p>意外的断电</p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731232609724.png" alt="image-20210731232609724" style="zoom:50%;"><p>“自动备份”</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731232852088.png" alt="image-20210731232852088"></p><h4 id="什么是持久化"><a href="#什么是持久化" class="headerlink" title="什么是持久化"></a>什么是持久化</h4><p>利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化。</p><h4 id="为什么要进行持久化"><a href="#为什么要进行持久化" class="headerlink" title="为什么要进行持久化"></a>为什么要进行持久化</h4><p>防止数据的意外丢失，确保数据安全性</p><h4 id="持久化过程保存什么"><a href="#持久化过程保存什么" class="headerlink" title="持久化过程保存什么"></a>持久化过程保存什么</h4><ul><li><p>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</p></li><li><p>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731232947852.png" alt="image-20210731232947852" style="zoom:80%;"></li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="RDB启动方式"><a href="#RDB启动方式" class="headerlink" title="RDB启动方式"></a>RDB启动方式</h4><p><strong>谁，什么时间，干什么事情</strong></p><p>命令执行</p><ul><li>谁：redis操作者（用户）</li><li>什么时间：即时（随时进行）</li><li>干什么事情：保存数据</li></ul><p>RDB启动方式 —— save指令</p><ul><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save</span><br></pre></td></tr></table></figure></li><li><p>作用</p><p>​     手动执行一次保存操作</p></li></ul><h4 id="RDB启动方式-——-save指令相关配置-写在conf文件中"><a href="#RDB启动方式-——-save指令相关配置-写在conf文件中" class="headerlink" title="RDB启动方式 —— save指令相关配置(写在conf文件中)"></a>RDB启动方式 —— save指令相关配置(写在conf文件中)</h4><ul><li><code>dbfilename dump.rdb </code><ul><li>说明：设置本地数据库文件名，默认值为 dump.rdb </li><li>经验：通常设置为dump-端口号.rdb</li></ul></li><li><code>dir </code><ul><li>说明：设置存储.rdb文件的路径 </li><li>经验：通常设置成存储空间较大的目录中，目录名称data</li></ul></li><li><code>rdbcompression yes </code><ul><li>说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩 </li><li>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</li></ul></li><li><code>rdbchecksum yes </code><ul><li>说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行 </li><li>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</li></ul></li></ul><blockquote><p>redis在启动时会自动恢复。</p></blockquote><h4 id="RDB启动方式-——-save指令工作原理"><a href="#RDB启动方式-——-save指令工作原理" class="headerlink" title="RDB启动方式 —— save指令工作原理"></a>RDB启动方式 —— save指令工作原理</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731233318766.png" alt="image-20210731233318766"></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731233335513.png" alt="image-20210731233335513"></p><p><strong>数据量过大，单线程执行方式造成效率过低如何处理？</strong></p><p>后台执行</p><ul><li>谁：redis操作者（用户）发起指令；redis服务器控制指令执行</li><li>什么时间：即时（发起）；合理的时间（执行）</li><li>干什么事情：保存数据</li></ul><h4 id="RDB启动方式-——-bgsave指令"><a href="#RDB启动方式-——-bgsave指令" class="headerlink" title="RDB启动方式 —— bgsave指令"></a>RDB启动方式 —— bgsave指令</h4><ul><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgsave</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><p>​    手动启动后台保存操作，但不是立即执行</p></li></ul><h4 id="RDB启动方式-——-bgsave指令工作原理"><a href="#RDB启动方式-——-bgsave指令工作原理" class="headerlink" title="RDB启动方式 —— bgsave指令工作原理"></a>RDB启动方式 —— bgsave指令工作原理</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731233619390.png" alt="image-20210731233619390"></p><blockquote><p>注意： bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用。</p></blockquote><h4 id="RDB启动方式-——-bgsave指令相关配置"><a href="#RDB启动方式-——-bgsave指令相关配置" class="headerlink" title="RDB启动方式 —— bgsave指令相关配置"></a>RDB启动方式 —— bgsave指令相关配置</h4><ul><li><p>dbfilename dump.rdb</p></li><li><p>dir</p></li><li><p>rdbcompression yes</p></li><li><p>rdbchecksum yes</p></li><li><p>stop-writes-on-bgsave-error yes </p><p>​    说明：后台存储过程中如果出现错误现象，是否停止保存操作<br>​    经验：通常默认为开启状态</p></li></ul><p><strong>反复执行保存指令，忘记了怎么办？不知道数据产生了多少变化，何时保存？</strong></p><p>自动执行</p><ul><li><p>谁：redis服务器发起指令（基于条件）</p></li><li><p>什么时间：满足条件</p></li><li><p>干什么事情：保存数据</p></li></ul><h4 id="RDB启动方式-——save配置"><a href="#RDB启动方式-——save配置" class="headerlink" title="RDB启动方式 ——save配置"></a>RDB启动方式 ——save配置</h4><ul><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save second changes</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>满足限定时间范围内key的变化数量达到指定数量即进行持久化</li></ul></li><li><p>参数 </p><ul><li>second：监控时间范围 </li><li>changes：监控key的变化量</li></ul></li><li><p>位置 </p><ul><li>在conf文件中进行配置</li></ul></li><li><p>范例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 </span><br><span class="line">save 300 10 </span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li></ul><h4 id="RDB启动方式-——save配置原理"><a href="#RDB启动方式-——save配置原理" class="headerlink" title="RDB启动方式 ——save配置原理"></a>RDB启动方式 ——save配置原理</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731234043375.png" alt="image-20210731234043375"></p><p>注意： </p><ul><li>save配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的 </li><li>save配置中对于second与changes设置通常具有互补对应关系，尽量不要设置成包含性关系 </li><li>save配置启动后执行的是bgsave操作</li></ul><h4 id="save配置相关配置"><a href="#save配置相关配置" class="headerlink" title="save配置相关配置"></a>save配置相关配置</h4><ul><li><code>dbfilename dump.rdb</code></li><li><code>dir</code></li><li><code>rdbcompression yes</code></li><li><code>rdbchecksum yes</code></li></ul><h4 id="RDB三种启动方式对比"><a href="#RDB三种启动方式对比" class="headerlink" title="RDB三种启动方式对比"></a>RDB三种启动方式对比</h4><table><thead><tr><th><strong>方式</strong></th><th><strong>save指令</strong></th><th><strong>bgsave指令</strong></th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td></tr><tr><td>阻塞客户端指令</td><td>是</td><td>否</td></tr><tr><td>额外内存消耗</td><td>否</td><td>是</td></tr><tr><td>启动新进程</td><td>否</td><td>是</td></tr></tbody></table><h4 id="rdb特殊启动形式"><a href="#rdb特殊启动形式" class="headerlink" title="rdb特殊启动形式"></a>rdb特殊启动形式</h4><ul><li><p>全量复制 </p><ul><li>在主从复制中详细讲解</li></ul></li><li><p>服务器运行过程中重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">debug reload</span><br></pre></td></tr></table></figure></li><li><p>关闭服务器时指定保存数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown save</span><br></pre></td></tr></table></figure></li></ul><p>默认情况下执行shutdown命令时，自动执行bgsave(如果没有开启AOF持久化功能)</p><h4 id="RDB优点"><a href="#RDB优点" class="headerlink" title="RDB优点"></a>RDB优点</h4><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul><h4 id="Rdb缺点"><a href="#Rdb缺点" class="headerlink" title="Rdb缺点"></a>Rdb缺点</h4><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>RDB存储的弊端</p><ul><li>存储数据量较大，效率较低 <ul><li>基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</li></ul></li><li>大数据量下的IO性能较低</li><li>基于fork创建子进程，内存产生额外消耗</li><li>宕机带来的数据丢失风险</li></ul><p>解决思路</p><ul><li>不写全数据，仅记录部分数据</li><li>降低区分数据是否改变的难度，改记录数据为记录操作过程</li><li>对所有操作均进行记录，排除丢失数据的风险</li></ul><h4 id="AOF概念"><a href="#AOF概念" class="headerlink" title="AOF概念"></a>AOF概念</h4><ul><li>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程</li><li>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</li></ul><h4 id="AOF写数据过程"><a href="#AOF写数据过程" class="headerlink" title="AOF写数据过程"></a>AOF写数据过程</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731234655307.png" alt="image-20210731234655307"></p><h4 id="AOF写数据三种策略-appendfsync"><a href="#AOF写数据三种策略-appendfsync" class="headerlink" title="AOF写数据三种策略(appendfsync)"></a>AOF写数据三种策略(appendfsync)</h4><ul><li>always(每次） <ul><li>每次写入操作均同步到AOF文件中，数据零误差，性能较低，不建议使用。</li></ul></li><li>everysec（每秒） <ul><li>每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高 ，建议使用，也是默认配置</li><li>在系统突然宕机的情况下丢失1秒内的数据</li></ul></li><li>no（系统控制） <ul><li>由操作系统控制每次同步到AOF文件的周期，整体过程不可控</li></ul></li></ul><h4 id="AOF功能开启"><a href="#AOF功能开启" class="headerlink" title="AOF功能开启"></a>AOF功能开启</h4><ul><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes|no</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>是否开启AOF持久化功能，默认为不开启状态</li></ul></li><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always|everysec|no</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>AOF写数据策略</li></ul></li></ul><h4 id="AOF相关配置"><a href="#AOF相关配置" class="headerlink" title="AOF相关配置"></a>AOF相关配置</h4><ul><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename filename</span><br></pre></td></tr></table></figure></li><li><p>作用 </p><ul><li>AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</li></ul></li><li><p>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure></li><li><p>作用</p><ul><li> AOF持久化文件保存路径，与RDB持久化文件保持一致即可</li></ul></li></ul><h4 id="AOF写数据遇到的问题"><a href="#AOF写数据遇到的问题" class="headerlink" title="AOF写数据遇到的问题"></a>AOF写数据遇到的问题</h4><p><strong>如果连续执行如下指令该如何处理</strong></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731235011802.png" alt="image-20210731235011802"></p><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录。</p><h4 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a>AOF重写作用</h4><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><h4 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h4><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令 <ul><li>如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</li></ul></li><li>对同一数据的多条写命令合并为一条命令 <ul><li>如lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c。 </li><li>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</li></ul></li></ul><h4 id="AOF重写方式"><a href="#AOF重写方式" class="headerlink" title="AOF重写方式"></a>AOF重写方式</h4><ul><li><p>手动重写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgrewriteaof</span><br></pre></td></tr></table></figure></li><li><p>自动重写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percentage</span><br></pre></td></tr></table></figure></li></ul><p>RDB启动方式 —— bgsave指令工作原理</p><p>AOF手动重写 —— bgrewriteaof指令工作原理</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731235246708.png" alt="image-20210731235246708"></p><h4 id="AOF自动重写方式"><a href="#AOF自动重写方式" class="headerlink" title="AOF自动重写方式"></a>AOF自动重写方式</h4><ul><li><p>自动重写触发条件设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size </span><br><span class="line">auto-aof-rewrite-percentage percent</span><br></pre></td></tr></table></figure></li><li><p>自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size </span><br><span class="line">aof_base_size</span><br></pre></td></tr></table></figure></li><li><p>自动重写触发条件</p><ul><li><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731235412031.png" alt="image-20210731235412031"></li></ul></li></ul><blockquote><p>可以使用info命令查看redis的各种运行信息。</p></blockquote><h4 id="AOF工作流程"><a href="#AOF工作流程" class="headerlink" title="AOF工作流程"></a>AOF工作流程</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731235524842.png" alt="image-20210731235524842"></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/06_redis%E6%8C%81%E4%B9%85%E5%8C%96/image-20210731235634342.png" alt="image-20210731235634342"></p><p>AOF缓冲区同步文件策略，由参数appendfsync控制 </p><p>系统调用write和fsync说明：</p><ul><li>write操作会触发延迟写（delayed write）机制，Linux在内核提供页缓冲区用来提高硬盘IO性能。write操作在写入系统缓冲区后直接返回。同步硬盘操作依赖于系统调度机制，列如：缓冲区页空间写满或达到特定时间周期。同步文件之前，如果此时系统故障宕机，缓冲区内数据将丢失。</li><li>fsync针对单个文件操作（比如AOF文件），做强制硬盘同步，fsync将阻塞知道写入硬盘完成后返回，保证了数据持久化。 </li><li>除了write、fsync、Linx还提供了sync、fdatasync操作，具体API说明参见：</li></ul><h3 id="RDB与AOF区别"><a href="#RDB与AOF区别" class="headerlink" title="RDB与AOF区别"></a>RDB与AOF区别</h3><h4 id="RDB-VS-AOF"><a href="#RDB-VS-AOF" class="headerlink" title="RDB VS AOF"></a>RDB VS AOF</h4><table><thead><tr><th><strong>持久化方式</strong></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td><strong>占用存储空间</strong></td><td>小（数据级：压缩）</td><td>大（指令级：重写）</td></tr><tr><td><strong>存储速度</strong></td><td>慢</td><td>快</td></tr><tr><td><strong>恢复速度</strong></td><td>快</td><td>慢</td></tr><tr><td><strong>数据安全性</strong></td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td><strong>资源消耗</strong></td><td>高/重量级</td><td>低/轻量级</td></tr><tr><td><strong>启动优先级</strong></td><td>低</td><td>高</td></tr></tbody></table><h4 id="RDB与AOF的选择之惑"><a href="#RDB与AOF的选择之惑" class="headerlink" title="RDB与AOF的选择之惑"></a>RDB与AOF的选择之惑</h4><ul><li>对数据非常敏感，建议使用默认的AOF持久化方案<ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</li><li>注意：由于AOF文件存储体积较大，且恢复速度较慢</li></ul></li><li>数据呈现阶段有效性，建议使用RDB持久化方案<ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案</li><li>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</li></ul></li><li>综合比对<ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li></ul></li></ul><h3 id="持久化应用场景"><a href="#持久化应用场景" class="headerlink" title="持久化应用场景"></a>持久化应用场景</h3><ul><li>Tips 1：<del>redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</del></li><li>Tips 3：<del>redis应用于各种结构型和非结构型高热度数据访问加速</del></li><li>Tips 4：<del>redis 应用于购物车数据存储设计</del></li><li>Tips 5：redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li><li>Tips 6：redis 应用于具有操作先后顺序的数据控制</li><li>Tips 7：redis 应用于最新消息展示</li><li>Tips 9：<del>redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</del></li><li>Tips 12：redis 应用于基于黑名单与白名单设定的服务控制</li><li>Tips 13：redis 应用于计数器组合排序功能对应的排名</li><li>Tips 15：<del>redis 应用于即时任务/消息队列执行管理</del></li><li>Tips 16：<del>redis 应用于按次结算的服务控制</del></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;持久化简介&quot;&gt;&lt;a href=&quot;#持久化简介&quot; class=&quot;headerlink&quot; title=&quot;持久化简介&quot;&gt;&lt;/a&gt;持久化简介&lt;/h3&gt;&lt;p&gt;意外的断电&lt;/p&gt;
&lt;img src=&quot;/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>05_linux环境安装redis</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/05_linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85redis/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/05_linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85redis/</id>
    <published>2021-08-04T10:04:49.000Z</published>
    <updated>2021-08-04T10:11:56.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2><h3 id="基于Linux环境安装Redis"><a href="#基于Linux环境安装Redis" class="headerlink" title="基于Linux环境安装Redis"></a>基于Linux环境安装Redis</h3><h4 id="基于Center-OS7安装Redis"><a href="#基于Center-OS7安装Redis" class="headerlink" title="基于Center OS7安装Redis"></a>基于Center OS7安装Redis</h4><ul><li><p>下载安装包 </p><p>​    wget <a href="http://download.redis.io/releases/redis-?.?.?.tar.gz">http://download.redis.io/releases/redis-?.?.?.tar.gz</a></p></li><li><p>解压 </p><p>​    tar –xvf 文件名.tar.gz</p></li><li><p>编译 </p><p>​    make</p></li><li><p>安装 (直接进入解压目录下运行 make install就行)</p><p>​    make install [destdir=/目录]</p></li></ul><h4 id="Redis基础环境设置"><a href="#Redis基础环境设置" class="headerlink" title="Redis基础环境设置"></a>Redis基础环境设置</h4><ul><li><p>创建软链接 </p><p>​    ln -s 原始目录名 快速访问目录名</p></li><li><p>创建配置文件管理目录 </p><p>​    mkdir conf </p><p>​    mkdir config</p></li><li><p>创建数据文件管理目录 </p><p>​    mkdir data</p></li></ul><h4 id="Redis服务启动"><a href="#Redis服务启动" class="headerlink" title="Redis服务启动"></a>Redis服务启动</h4><ul><li><p>默认配置启动 </p><p>​    redis-server </p><p>​    redis-server –-port 6379 </p><p>​    redis-server –-port 6380 ……</p></li><li><p>指定配置文件启动 </p><p>​    redis-server redis.conf </p><p>​    redis-server redis-6379.conf </p><p>​    redis-server redis-6380.conf …… </p><p>​    redis-server conf/redis-6379.conf </p><p>​    redis-server config/redis-6380.conf ……</p></li></ul><h4 id="Redis客户端连接"><a href="#Redis客户端连接" class="headerlink" title="Redis客户端连接"></a>Redis客户端连接</h4><ul><li><p>默认连接 </p><p>​    redis-cli</p></li><li><p>连接指定服务器 </p><p>​    redis-cli -h 127.0.0.1</p><p>​    redis-cli –port 6379 </p><p>​    redis-cli -p 6379</p><p>​    redis-cli -h 127.0.0.1 –port 6379</p></li></ul><h4 id="Redis服务端配置"><a href="#Redis服务端配置" class="headerlink" title="Redis服务端配置"></a>Redis服务端配置</h4><ul><li>基本配置 <ul><li><code>daemonize yes </code></li><li>以守护进程方式启动，使用本启动方式，redis将以服务的形式存在，日志将不再打印到命令窗口中 </li><li><code>port 6*** </code></li><li>设定当前服务启动端口号 </li><li><code>dir “/自定义目录/redis/data“ </code></li><li>设定当前服务文件保存位置，包含日志文件、持久化文件（后面详细讲解）等 </li><li><code>logfile &quot;6***.log“ </code></li><li>设定日志文件名，便于查阅</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis-安装&quot;&gt;&lt;a href=&quot;#Redis-安装&quot; class=&quot;headerlink&quot; title=&quot;Redis 安装&quot;&gt;&lt;/a&gt;Redis 安装&lt;/h2&gt;&lt;h3 id=&quot;基于Linux环境安装Redis&quot;&gt;&lt;a href=&quot;#基于Linux环境安装Re</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>04_jedis</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/04_jedis/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/04_jedis/</id>
    <published>2021-08-04T10:04:30.000Z</published>
    <updated>2021-08-04T10:16:35.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jedis简介"><a href="#Jedis简介" class="headerlink" title="Jedis简介"></a>Jedis简介</h3><h4 id="编程语言与redis"><a href="#编程语言与redis" class="headerlink" title="编程语言与redis"></a>编程语言与redis</h4><ul><li><p>Java语言连接redis服务 </p><p>​    Jedis </p><p>​    SpringData Redis </p><p>​    Lettuce</p></li><li><p>C 、C++ 、C# 、Erlang、Lua 、Objective-C 、Perl 、PHP 、Python 、Ruby 、Scala</p></li><li><p>可视化连接redis客户端 </p><p>​    Redis Desktop Manager </p><p>​    Redis Client </p><p>​    Redis Studio</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/04_jedis/image-20210731140725093.png" alt="image-20210731140725093"></p></li></ul><h3 id="HelloWorld（Jedis版）"><a href="#HelloWorld（Jedis版）" class="headerlink" title="HelloWorld（Jedis版）"></a>HelloWorld（Jedis版）</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>jar包导入 </p><p>​    下载地址：<a href="https://mvnrepository.com/artifact/redis.clients/jedis">https://mvnrepository.com/artifact/redis.clients/jedis</a></p></li><li><p>基于maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="客户端连接redis"><a href="#客户端连接redis" class="headerlink" title="客户端连接redis"></a>客户端连接redis</h4><ul><li><p>连接redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure></li><li><p>操作redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">jedis.lpush(<span class="string">&quot;list1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">List&lt;String&gt; list1 = jedis.lrange(<span class="string">&quot;list&quot;</span>,<span class="string">&quot;0&quot;</span>,<span class="string">&quot;-1&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>关闭redis连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.close();</span><br></pre></td></tr></table></figure></li><li><p>API文档 </p><p>​    <a href="http://xetorthio.github.io/jedis/">http://xetorthio.github.io/jedis/</a></p></li></ul><h3 id="Jedis读写redis数据"><a href="#Jedis读写redis数据" class="headerlink" title="Jedis读写redis数据"></a>Jedis读写redis数据</h3><p><strong>案例：服务调用次数控制</strong></p><p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><ul><li>案例要求<ul><li>设定A、B、C三个用户</li><li>A用户限制10次/分调用，B用户限制30次/分调用，C用户不限制</li></ul></li></ul><p><strong>案例：需求分析</strong></p><ol><li>设定一个服务方法，用于模拟实际业务调用的服务，内部采用打印模拟调用</li><li>在业务调用前服务调用控制单元，内部使用redis进行控制，参照之前的方案</li><li>对调用超限使用异常进行控制，异常处理设定为打印提示信息</li><li>主程序启动3个线程，分别表示3种不同用户的调用</li></ol><p><strong>案例：实现步骤</strong></p><ol><li><p>设定业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">business</span><span class="params">(String id,<span class="keyword">long</span> num)</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;用户&quot;</span>+id+<span class="string">&quot;发起业务调用，当前第&quot;</span>+num+<span class="string">&quot;次&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设定多线类，模拟用户调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123; </span><br><span class="line">        jd.service(id); </span><br><span class="line">        <span class="comment">//模拟调用间隔，设定为1.x秒 </span></span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            Random r = <span class="keyword">new</span> Random(); </span><br><span class="line">            Thread.sleep(<span class="number">1000</span>+ r.nextInt(<span class="number">200</span>)); </span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123; </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设计redis控制方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(String id)</span></span>&#123; </span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>); </span><br><span class="line">    String value = jedis.get(<span class="string">&quot;compid:&quot;</span> + id); </span><br><span class="line">    <span class="comment">//判定是否具有调用计数控制，利用异常进行控制处理 </span></span><br><span class="line">    <span class="keyword">if</span>(value == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="comment">//没有控制，创建控制计数器 </span></span><br><span class="line">        jedis.setex(<span class="string">&quot;compid:&quot;</span> + id, <span class="number">20</span>, <span class="string">&quot;&quot;</span>+(Long.MAX_VALUE-<span class="number">10</span>)); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="comment">//有控制，自增，并调用业务 </span></span><br><span class="line">        <span class="keyword">try</span>&#123; </span><br><span class="line">            Long val = jedis.incr(<span class="string">&quot;compid:&quot;</span>+id); </span><br><span class="line">            business(id,<span class="number">10</span>+val-Long.MAX_VALUE); </span><br><span class="line">        &#125;<span class="keyword">catch</span> (JedisDataException e)&#123; </span><br><span class="line">            <span class="comment">//调用次数溢出，弹出提示 </span></span><br><span class="line">            System.out.println(<span class="string">&quot;用户：&quot;</span>+id+<span class="string">&quot;使用次数已达到上限，请稍后再试，或升级VIP会员&quot;</span>); </span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123; </span><br><span class="line">            jedis.close(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设计启动主程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    MyThread t1 = <span class="keyword">new</span> MyThread(<span class="string">&quot;初级用户&quot;</span>); </span><br><span class="line">    t1.start(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续1：对业务控制方案进行改造，设定不同用户等级的判定 </p><p>后续2：将不同用户等级对应的信息、限制次数等设定到redis中，使用hash保存</p></li></ol><h3 id="Jedis简易工具类开发"><a href="#Jedis简易工具类开发" class="headerlink" title="Jedis简易工具类开发"></a>Jedis简易工具类开发</h3><h4 id="基于连接池获取连接"><a href="#基于连接池获取连接" class="headerlink" title="基于连接池获取连接"></a>基于连接池获取连接</h4><ul><li><p>JedisPool：Jedis提供的连接池技术 </p><p>​    poolConfig:连接池配置对象 </p><p>​    host:redis服务地址 </p><p>​    port:redis服务端口号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JedisPool</span><span class="params">(GenericObjectPoolConfig poolConfig, String host, <span class="keyword">int</span> port)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">this</span>(poolConfig, host, port, <span class="number">2000</span>, (String)<span class="keyword">null</span>, <span class="number">0</span>, (String)<span class="keyword">null</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="封装连接参数"><a href="#封装连接参数" class="headerlink" title="封装连接参数"></a>封装连接参数</h4><ul><li><p>jedis.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jedis.host</span>=<span class="string">localhost </span></span><br><span class="line"><span class="meta">jedis.port</span>=<span class="string">6379 </span></span><br><span class="line"><span class="meta">jedis.maxTotal</span>=<span class="string">30 </span></span><br><span class="line"><span class="meta">jedis.maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="加载配置信息"><a href="#加载配置信息" class="headerlink" title="加载配置信息"></a>加载配置信息</h4><ul><li><p>静态代码块初始化资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123; </span><br><span class="line">    <span class="comment">//读取配置文件 获得参数值 </span></span><br><span class="line">    ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jedis&quot;</span>); </span><br><span class="line">    host = rb.getString(<span class="string">&quot;jedis.host&quot;</span>); </span><br><span class="line">    port = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.port&quot;</span>)); </span><br><span class="line">    maxTotal = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.maxTotal&quot;</span>)); </span><br><span class="line">    maxIdle = Integer.parseInt(rb.getString(<span class="string">&quot;jedis.maxIdle&quot;</span>)); </span><br><span class="line">    poolConfig = <span class="keyword">new</span> JedisPoolConfig(); </span><br><span class="line">    poolConfig.setMaxTotal(maxTotal); </span><br><span class="line">    poolConfig.setMaxIdle(maxIdle); </span><br><span class="line">    jedisPool = <span class="keyword">new</span> JedisPool(poolConfig,host,port); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h4><ul><li><p>对外访问接口，提供jedis连接对象，连接从连接池获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123; </span><br><span class="line">    Jedis jedis = jedisPool.getResource(); </span><br><span class="line">    <span class="keyword">return</span> jedis; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="可视化客户端"><a href="#可视化客户端" class="headerlink" title="可视化客户端"></a>可视化客户端</h3><h4 id="Redis-Desktop-Manager"><a href="#Redis-Desktop-Manager" class="headerlink" title="Redis Desktop Manager"></a>Redis Desktop Manager</h4><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/04_jedis/image-20210731142546176.png" alt="image-20210731142546176"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Jedis简介&quot;&gt;&lt;a href=&quot;#Jedis简介&quot; class=&quot;headerlink&quot; title=&quot;Jedis简介&quot;&gt;&lt;/a&gt;Jedis简介&lt;/h3&gt;&lt;h4 id=&quot;编程语言与redis&quot;&gt;&lt;a href=&quot;#编程语言与redis&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>03_redis通用指令</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/03_redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/03_redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4/</id>
    <published>2021-08-04T10:04:06.000Z</published>
    <updated>2021-08-07T03:04:18.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-通用指令"><a href="#Redis-通用指令" class="headerlink" title="Redis 通用指令"></a>Redis 通用指令</h2><h3 id="key通用指令"><a href="#key通用指令" class="headerlink" title="key通用指令"></a>key通用指令</h3><h4 id="key-特征"><a href="#key-特征" class="headerlink" title="key 特征"></a>key 特征</h4><ul><li>key是一个字符串，通过key获取redis中保存的数据</li></ul><p><strong>key应该设计哪些操作？</strong></p><ul><li>对于key自身状态的相关操作，例如：删除，判定存在，获取类型等</li><li>对于key有效性控制相关操作，例如：有效期设定，判定是否有效，有效状态的切换等</li><li>对于key快速查询操作，例如：按指定策略查询key</li><li>……</li></ul><h4 id="key-基本操作"><a href="#key-基本操作" class="headerlink" title="key 基本操作"></a>key 基本操作</h4><ul><li><p>删除指定key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure></li><li><p>获取key是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure></li><li><p>获取key的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure></li></ul><h4 id="key-扩展操作（时效性控制）"><a href="#key-扩展操作（时效性控制）" class="headerlink" title="key 扩展操作（时效性控制）"></a>key 扩展操作（时效性控制）</h4><ul><li><p>为指定key设置有效期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key timestamp#设置时间戳，linux下通常使用时间戳来控制</span><br><span class="line">pexpireat key milliseconds-timestamp</span><br></pre></td></tr></table></figure></li><li><p>获取key的有效时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ttl key #key不存在返回-2 key存在返回-1 ，key设置了有效期，返回有效时常</span><br><span class="line">pttl key</span><br></pre></td></tr></table></figure></li><li><p>切换key从时效性转换为永久性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure></li></ul><h4 id="key-扩展操作（查询模式）"><a href="#key-扩展操作（查询模式）" class="headerlink" title="key 扩展操作（查询模式）"></a>key 扩展操作（查询模式）</h4><ul><li><p>查询key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys pattern</span><br></pre></td></tr></table></figure></li><li><p>查询模式规则</p><p>* 匹配任意数量的任意符号         ?  配合一个任意符号         [] 匹配一个指定符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys * 查询所有 </span><br><span class="line">keys it* 查询所有以it开头 </span><br><span class="line">keys *heima 查询所有以heima结尾 </span><br><span class="line">keys ??heima 查询所有前面两个字符任意，后面以heima结尾 </span><br><span class="line">keys user:? 查询所有以user:开头，最后一个字符任意 </span><br><span class="line">keys u[st]er:1 查询所有以u开头，以er:1结尾，中间包含一个字母，s或t</span><br></pre></td></tr></table></figure></li></ul><h4 id="key-其他操作"><a href="#key-其他操作" class="headerlink" title="key 其他操作"></a>key 其他操作</h4><ul><li><p>为key改名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename key newkey #会覆盖newkey</span><br><span class="line">renamenx key newkey#newkey已拥有会失败</span><br></pre></td></tr></table></figure></li><li><p>对所有key排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort#用来对列表，集合排序，但并不改变列表集合的顺序</span><br></pre></td></tr></table></figure></li><li><p>其他key通用操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据库通用指令"><a href="#数据库通用指令" class="headerlink" title="数据库通用指令"></a>数据库通用指令</h3><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>key 的重复问题</p><ul><li>key是由程序员定义的</li><li>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key</li><li>数据不区分种类、类别混杂在一起，极易出现重复或冲突</li></ul><p><strong>解决方案</strong></p><ul><li>redis为每个服务提供有16个数据库，编号从0到15</li><li>每个数据库之间的数据相互独立</li></ul><h4 id="db-基本操作"><a href="#db-基本操作" class="headerlink" title="db 基本操作"></a>db 基本操作</h4><ul><li><p>切换数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select index</span><br></pre></td></tr></table></figure></li><li><p>其他操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br><span class="line">ping#测试链接是否联通</span><br><span class="line">echo message#原样输出，可以输出日志</span><br></pre></td></tr></table></figure></li></ul><h4 id="db-相关操作"><a href="#db-相关操作" class="headerlink" title="db 相关操作"></a>db 相关操作</h4><ul><li><p>数据移动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move key db</span><br></pre></td></tr></table></figure></li><li><p>数据清除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbsize#查看库里有多少key</span><br><span class="line">flushdb#刷掉现在的数据</span><br><span class="line">flushall#刷掉所有数据</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis-通用指令&quot;&gt;&lt;a href=&quot;#Redis-通用指令&quot; class=&quot;headerlink&quot; title=&quot;Redis 通用指令&quot;&gt;&lt;/a&gt;Redis 通用指令&lt;/h2&gt;&lt;h3 id=&quot;key通用指令&quot;&gt;&lt;a href=&quot;#key通用指令&quot; class</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>02_redis数据类型</title>
    <link href="http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-04T10:03:42.000Z</published>
    <updated>2021-08-04T10:09:32.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="02-redis-数据类型"><a href="#02-redis-数据类型" class="headerlink" title="02_redis 数据类型"></a>02_redis 数据类型</h2><h3 id="数据存储类型介绍"><a href="#数据存储类型介绍" class="headerlink" title="数据存储类型介绍"></a>数据存储类型介绍</h3><h4 id="业务数据的特殊性"><a href="#业务数据的特殊性" class="headerlink" title="业务数据的特殊性"></a>业务数据的特殊性</h4><p><strong>作为缓存使用</strong></p><ol><li><p>原始业务功能设计</p><ul><li>秒杀</li><li>618活动</li><li>双11活动</li><li>排队购票</li></ul></li><li><p>运营平台监控到的突发高频访问数据</p><ul><li>突发时政要闻，被强势关注围观</li></ul></li><li><p>高频、复杂的统计数据</p><ul><li>在线人数</li><li>投票排行榜</li></ul></li></ol><p><strong>附加功能</strong></p><p>系统功能优化或升级</p><ul><li><p>单服务器升级集群</p></li><li><p>Session 管理</p></li><li><p>Token 管理</p></li></ul><h4 id="Redis-数据类型（5种常用）"><a href="#Redis-数据类型（5种常用）" class="headerlink" title="Redis 数据类型（5种常用）"></a>Redis 数据类型（5种常用）</h4><ul><li>string             String </li><li>hash              HashMap </li><li>list                  LinkedList </li><li>set                  HashSet </li><li>sorted_set     TreeSet</li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><h4 id="redis-数据存储格式"><a href="#redis-数据存储格式" class="headerlink" title="redis 数据存储格式"></a>redis 数据存储格式</h4><ul><li>redis 自身是一个 Map，其中所有的数据都是采用 key : value 的形式存储</li><li>数据类型指的是存储的数据的类型，也就是 value 部分的类型，key 部分永远都是字符串</li></ul><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730232010224.png" alt="image-20210730232010224" style="zoom: 67%;"><h4 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h4><ul><li>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用（但仍然是字符串）</li></ul><h4 id="string-类型数据的基本操作"><a href="#string-类型数据的基本操作" class="headerlink" title="string 类型数据的基本操作"></a>string 类型数据的基本操作</h4><ul><li><p>添加/修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure></li><li><p>删除数据（返回 <code>(integer) 1</code> 代表成功， <code>(integer) 0</code> 代表失败）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure></li><li><p>添加/修改多个数据(m 指的是 Multiple[ˈmʌltɪpl])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset key1 value1 key2 value2 …</span><br></pre></td></tr></table></figure></li><li><p>获取多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget key1 key2 …</span><br></pre></td></tr></table></figure></li><li><p>获取数据字符个数（字符串长度）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen key</span><br></pre></td></tr></table></figure></li><li><p>追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure></li></ul><h4 id="string-类型数据的基础操作"><a href="#string-类型数据的基础操作" class="headerlink" title="string 类型数据的基础操作"></a>string 类型数据的基础操作</h4><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730232628964.png" alt="image-20210730232628964" style="zoom: 67%;"><h4 id="string-类型数据的扩展操作"><a href="#string-类型数据的扩展操作" class="headerlink" title="string 类型数据的扩展操作"></a>string 类型数据的扩展操作</h4><p><strong>业务场景</strong></p><p>大型企业级应用中，分表操作是基本操作，使用多张表存储同类型数据，但是对应的主键 id 必须保证统一性，不能重复。Oracle 数据库具有 sequence 设定，可以解决该问题，但是 MySQL数据库并不具有类似的机制，那么如何解决？</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730232728589.png" alt="image-20210730232728589"></p><p><strong>解决方案</strong></p><ul><li><p>设置数值数据增加指定范围的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">incr key </span><br><span class="line">incrby key increment </span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure></li><li><p>设置数值数据减少指定范围的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decr key </span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure></li></ul><p><strong>string 作为数值操作</strong></p><ul><li>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr，decr时会转成数值型进行计算。</li><li>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</li><li>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis 数值上限范围，将报错。 9223372036854775807（java中long型数据最大值，Long.MAX_VALUE）</li></ul><p>Tips 1：</p><ul><li>redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</li><li>此方案适用于所有数据库，且支持数据库集群</li></ul><p><strong>业务场景</strong><br>“最强女生”启动海选投票，只能通过微信投票，每个微信号每 4 小时只能投1票。</p><p>电商商家开启热门商品推荐，热门商品不能一直处于热门期，每种商品热门期维持3天，3天后自动取消热门。</p><p>新闻网站会出现热点新闻，热点新闻最大的特征是时效性，如何自动控制热点新闻的时效性。</p><p>news_id:HB314790725    00：30</p><p><strong>解决方案</strong></p><ul><li><p>设置数据具有指定的生命周期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds value </span><br><span class="line">setex tel 10 1</span><br><span class="line"># 如果期间在设置一个tel的值 如 setex tel 2 上面的设定会失效</span><br><span class="line"></span><br><span class="line">psetex key milliseconds value</span><br></pre></td></tr></table></figure></li></ul><p>Tips 2：</p><ul><li>redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li></ul><h4 id="string-类型数据操作的注意事项"><a href="#string-类型数据操作的注意事项" class="headerlink" title="string 类型数据操作的注意事项"></a>string 类型数据操作的注意事项</h4><ul><li><p>数据操作不成功的反馈与数据正常操作之间的差异（通过使用的指令区分）</p><ol><li><p>表示运行结果是否成功</p><ul><li>(integer) 0 → false 失败</li><li>(integer) 1 → true 成功 </li></ul></li><li><p>表示运行结果值     </p><ul><li>(integer) 3 → 3 3个</li><li>(integer) 1 → 1 1个</li></ul></li></ol></li><li><p>数据未获取到 </p><ul><li>（nil）等同于null</li></ul></li><li><p>数据最大存储量 </p><ul><li>512MB</li></ul></li><li><p>数值计算最大范围（java中的long的最大值） </p><ul><li>9223372036854775807</li></ul></li></ul><h4 id="string-类型应用场景"><a href="#string-类型应用场景" class="headerlink" title="string 类型应用场景"></a>string 类型应用场景</h4><p><strong>业务场景</strong></p><p>主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数与微博数量</p><p><strong>解决方案</strong></p><ul><li>在redis中为大V用户设定用户信息，以表名，用户主键和属性值作为key，后台设定定时刷新策略即可 <ul><li>eg: <code>user:id:3506728370:fans → 12210947</code></li><li>eg:<code>user:id:3506728370:blogs → 6164</code></li><li>eg: <code>user:id:3506728370:focuss → 83</code></li></ul></li><li>在redis中以json格式存储大V用户信息，定时刷新（也可以使用hash类型） <ul><li>eg: <code>user:id:3506728370 → &#123;&quot;id&quot;:3506728370,&quot;name&quot;:&quot;春晚&quot;,&quot;fans&quot;:12210862,&quot;blogs&quot;:6164,&quot;focus&quot;:83&#125;</code></li></ul></li></ul><p>Tips 3：</p><ul><li>redis应用于各种结构型和非结构型高热度数据访问加速</li></ul><h4 id="key-的设置约定"><a href="#key-的设置约定" class="headerlink" title="key 的设置约定"></a>key 的设置约定</h4><ul><li><p>数据库中的热点数据key命名惯例 </p><table><thead><tr><th></th><th>表名:</th><th>主键名:</th><th>主键值:</th><th>字段名</th></tr></thead><tbody><tr><td>eg1：</td><td>order:</td><td>id:</td><td>29437595:</td><td>name</td></tr><tr><td>eg2：</td><td>equip:</td><td>id:</td><td>390472345:</td><td>type</td></tr><tr><td>eg3：</td><td>news:</td><td>id:</td><td>202004150:</td><td>title</td></tr></tbody></table></li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><h4 id="hash-类型"><a href="#hash-类型" class="headerlink" title="hash 类型"></a>hash 类型</h4><p><strong>存储的困惑</strong></p><p>对象类数据的存储如果具有较频繁的更新需求操作会显得笨重</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730234203003.png" alt="image-20210730234203003"></p><ul><li><p>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p></li><li><p>需要的存储结构：一个存储空间保存多个键值对数据</p></li><li><p>hash类型：底层使用哈希表结构实现数据存储</p></li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730234302978.png" alt="image-20210730234302978"></p><h4 id="hash-类型数据的基本操作"><a href="#hash-类型数据的基本操作" class="headerlink" title="hash 类型数据的基本操作"></a>hash 类型数据的基本操作</h4><ul><li><p>添加/修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hset key field value</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hget key field </span><br><span class="line">hgetall key  #会把file value都显示出来</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdel key field1 [field2]</span><br></pre></td></tr></table></figure></li><li><p>添加/修改多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset key field1 value1 field2 value2 …</span><br></pre></td></tr></table></figure></li><li><p>获取多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget key field1 field2 …</span><br></pre></td></tr></table></figure></li><li><p>获取哈希表中字段的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure></li><li><p>获取哈希表中是否存在指定的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure></li></ul><h4 id="hash-类型数据扩展操作"><a href="#hash-类型数据扩展操作" class="headerlink" title="hash 类型数据扩展操作"></a>hash 类型数据扩展操作</h4><ul><li><p>获取哈希表中所有的字段名或字段值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys key </span><br><span class="line">hvals key</span><br></pre></td></tr></table></figure></li><li><p>设置指定字段的数值数据增加指定范围的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment #可以是复数</span><br><span class="line">hincrbyfloat key field increment</span><br></pre></td></tr></table></figure></li></ul><h4 id="hash-类型数据操作的注意事项"><a href="#hash-类型数据操作的注意事项" class="headerlink" title="hash 类型数据操作的注意事项"></a>hash 类型数据操作的注意事项</h4><ul><li>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）</li><li>每个 hash 可以存储 2 ^ 23 - 1 个键值对</li><li>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</li><li>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈</li></ul><h4 id="hash-类型应用场景"><a href="#hash-类型应用场景" class="headerlink" title="hash 类型应用场景"></a>hash 类型应用场景</h4><p><strong>业务场景</strong></p><p>电商网站购物车设计与实现</p><p><strong>业务分析</strong></p><ul><li><p>仅分析购物车的redis存储模型 添加、浏览、更改数量、删除、清空</p></li><li><p>购物车于数据库间持久化同步（不讨论）</p></li><li><p>购物车于订单间关系（不讨论） </p><p>​    提交购物车：读取数据生成订单 </p><p>​    商家临时价格调整：隶属于订单级别</p></li><li><p>未登录用户购物车信息存储（不讨论） cookie存储</p></li></ul><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730234831817.png" alt="image-20210730234831817" style="zoom:50%;"><p><strong>解决方案</strong></p><ul><li><p>以客户id作为key，每位客户创建一个hash存储结构存储对应的购物车信息</p></li><li><p>将商品编号作为field，购买数量作为value进行存储</p></li><li><p>添加商品：追加全新的field与value</p></li><li><p>浏览：遍历hash</p></li><li><p>更改数量：自增/自减，设置value值</p></li><li><p>删除商品：删除field</p></li><li><p>清空：删除key</p></li><li><p>此处仅讨论购物车中的模型设计</p></li><li><p>购物车与数据库间持久化同步、购物车与订单间关系、未登录用户购物车信息存储不进行讨论</p></li></ul><p><strong>当前设计是否加速了购物车的呈现</strong></p><p>当前仅仅是将数据存储到了redis中，并没有起到加速的作用，商品信息还需要二次查询数据库</p><ul><li><p>每条购物车中的商品记录保存成两条field</p></li><li><p>field1专用于保存购买数量 </p><p>​    命名格式：商品id:nums </p><p>​    保存数据：数值</p></li><li><p>field2专用于保存购物车中显示的信息，包含文字描述，图片地址，所属商家信息等           (提升：独立hash，不同用户购买的商品信息可能相同。)</p><p>​    命名格式：商品id:info </p><p>​    保存数据：json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hsetnx key field value</span><br><span class="line">#如果当前key中对象field有值就什么都不做，如果没有则加载。</span><br></pre></td></tr></table></figure></li></ul><p>Tips 4：</p><ul><li>redis 应用于购物车数据存储设计</li></ul><p><strong>业务场景</strong></p><p>双11活动日，销售手机充值卡的商家对移动、联通、电信的30元、50元、100元商品推出抢购活动，每种商品抢购上限1000张</p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210730235312731.png" alt="image-20210730235312731" style="zoom:50%;"><p><strong>解决方案</strong></p><ul><li><p>以商家id作为key</p></li><li><p>将参与抢购的商品id作为field</p></li><li><p>将参与抢购的商品数量作为对应的value</p></li><li><p>抢购时使用降值的方式控制产品数量</p></li><li><p>实际业务中还有超卖等实际问题，这里不做讨论</p></li></ul><p>Tips 5：</p><ul><li>redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li></ul><p><strong>业务场景</strong></p><p>string存储对象（json）与hash存储对象区别：string讲究整体性，读操作为主，hash操作更新更灵活一些。</p><blockquote><p>原则上：redis只做数据提供和保存，尽量不要使用业务压到redis上， 如判断是否存在。</p></blockquote><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><h4 id="list-类型"><a href="#list-类型" class="headerlink" title="list 类型"></a>list 类型</h4><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构实现</li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731100032895.png" alt="image-20210731100032895"></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731100054514.png" alt="image-20210731100054514"></p><h4 id="list-类型数据基本操作"><a href="#list-类型数据基本操作" class="headerlink" title="list 类型数据基本操作"></a>list 类型数据基本操作</h4><ul><li><p>添加/修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 [value2] ……</span><br><span class="line">rpush key value1 [value2] ……</span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lrange key start stop#start stop为索引 </span><br><span class="line"># 倒数第一个为-1 如 lrange 0 -1</span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure></li><li><p>获取并移除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></li></ul><h4 id="list-类型数据扩展操作"><a href="#list-类型数据扩展操作" class="headerlink" title="list 类型数据扩展操作"></a>list 类型数据扩展操作</h4><ul><li><p>规定时间内获取并移除数据（可以等待，可以从若干个列表中取）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br><span class="line">brpoplpush source destination timeout</span><br></pre></td></tr></table></figure></li></ul><p><strong>业务场景</strong></p><p>微信朋友圈点赞，要求按照点赞顺序显示点赞好友信息 如果取消点赞，移除对应好友信息</p><p>解决方案</p><ul><li><p>移除指定数据（count为移除的数目）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure></li></ul><p>Tips 6：</p><ul><li>redis 应用于具有操作先后顺序的数据控制</li></ul><h4 id="list-类型数据操作注意事项"><a href="#list-类型数据操作注意事项" class="headerlink" title="list 类型数据操作注意事项"></a>list 类型数据操作注意事项</h4><ul><li>list中保存的数据都是string类型的，数据总容量是有限的，最多2 ^ 23 - 1 个元素 (4294967295)。</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</li><li>获取全部数据操作结束索引设置为-1</li><li>list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</li></ul><h4 id="list-类型应用场景"><a href="#list-类型应用场景" class="headerlink" title="list 类型应用场景"></a>list 类型应用场景</h4><p><strong>业务场景</strong></p><p>twitter、新浪微博、腾讯微博中个人用户的关注列表需要按照用户的关注顺序进行展示，粉丝列表需要将最近关注的粉丝列在前面</p><p>新闻、资讯类网站如何将最新的新闻或资讯按照发生的时间顺序展示？ 企业运营过程中，系统将产生出大量的运营数据，如何保障多台服务器操作日志的统一顺序输出？</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731100521829.png" alt="image-20210731100521829"></p><p><strong>解决方案</strong></p><ul><li>依赖list的数据具有顺序的特征对信息进行管理</li><li>使用队列模型解决多路信息汇总合并的问题</li><li>使用栈模型解决最新消息的问题</li></ul><p>Tips 7：</p><ul><li>redis 应用于最新消息展示</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><h4 id="set-类型"><a href="#set-类型" class="headerlink" title="set 类型"></a>set 类型</h4><ul><li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</li></ul><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731100628209.png" alt="image-20210731100628209"></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731100646315.png" alt="image-20210731100646315"></p><h4 id="set-类型数据的基本操作"><a href="#set-类型数据的基本操作" class="headerlink" title="set 类型数据的基本操作"></a>set 类型数据的基本操作</h4><ul><li><p>添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd key member1 [member2]</span><br></pre></td></tr></table></figure></li><li><p>获取全部数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srem key member1 [member2]</span><br></pre></td></tr></table></figure></li><li><p>获取集合数据总量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure></li><li><p>判断集合中是否包含指定数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure></li></ul><h4 id="set-类型数据的扩展操作"><a href="#set-类型数据的扩展操作" class="headerlink" title="set 类型数据的扩展操作"></a>set 类型数据的扩展操作</h4><p><strong>业务场景</strong></p><p>每位用户首次使用今日头条时会设置3项爱好的内容，但是后期为了增加用户的活跃度、兴趣点，必须让用户对其他信息类别逐渐产生兴趣，增加客户留存度，如何实现？</p><p><strong>业务分析</strong></p><ul><li>系统分析出各个分类的最新或最热点信息条目并组织成set集合</li><li>随机挑选其中部分信息</li><li>配合用户关注信息分类中的热点信息组织成展示的全信息集合</li></ul><p><strong>解决方案</strong></p><ul><li><p>随机获取集合中指定数量的数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure></li><li><p>随机获取集合中的某个数据并将该数据移出集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure></li></ul><p>Tips 8：</p><ul><li>redis 应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐，大V推荐等</li></ul><p><strong>业务场景</strong></p><p>脉脉为了促进用户间的交流，保障业务成单率的提升，需要让每位用户拥有大量的好友，事实上职场新人不具有更多的职场好友，如何快速为用户积累更多的好友？</p><p>新浪微博为了增加用户热度，提高用户留存性，需要微博用户在关注更多的人，以此获得更多的信息或热门话题，如何提高用户关注他人的总量？</p><p>QQ新用户入网年龄越来越低，这些用户的朋友圈交际圈非常小，往往集中在一所学校甚至一个班级中，如何帮助用户快速积累好友用户带来更多的活跃度？</p><p>微信公众号是微信信息流通的渠道之一，增加用户关注的公众号成为提高用户活跃度的一种方式，如何帮助用户积累更多关注的公众号？</p><p>美团外卖为了提升成单量，必须帮助用户挖掘美食需求，如何推荐给用户最适合自己的美食？</p><p><strong>解决方案</strong></p><ul><li><p>求两个集合的交、并、差集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter key1 [key2] </span><br><span class="line">sunion key1 [key2] </span><br><span class="line">sdiff key1 [key2]</span><br></pre></td></tr></table></figure></li><li><p>求两个集合的交、并、差集并存储到指定集合中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore destination key1 [key2] </span><br><span class="line">sunionstore destination key1 [key2] </span><br><span class="line">sdiffstore destination key1 [key2]</span><br></pre></td></tr></table></figure></li><li><p>将指定数据从原始集合中移动到目标集合中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smove source destination member</span><br></pre></td></tr></table></figure><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731101714762.png" alt="image-20210731101714762"></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731101744393.png" alt="image-20210731101744393"></p></li></ul><p>Tips 9：</p><ul><li>redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>显示共同关注（一度）</li><li>显示共同好友（一度）</li><li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li><li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li></ul><h4 id="set-类型数据操作的注意事项"><a href="#set-类型数据操作的注意事项" class="headerlink" title="set 类型数据操作的注意事项"></a>set 类型数据操作的注意事项</h4><ul><li>set 类型不允许数据重复，如果添加的数据在 set 中已经存在，将只保留一份</li><li>set 虽然与hash的存储结构相同，但是无法启用hash中存储值的空间</li></ul><h4 id="set-类型应用场景"><a href="#set-类型应用场景" class="headerlink" title="set 类型应用场景"></a>set 类型应用场景</h4><p><strong>业务场景</strong></p><p>集团公司共具有12000名员工，内部OA系统中具有700多个角色，3000多个业务操作，23000多种数据，每位员工具有一个或多个角色，如何快速进行业务操作的权限校验？</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731101946658.png" alt="image-20210731101946658"></p><p><strong>业务场景</strong></p><p>公司对旗下新的网站做推广，统计网站的PV（访问量）,UV（独立访客）,IP（独立IP）。 </p><p>PV：网站被访问次数，可通过刷新页面提高访问量 </p><p>UV：网站被不同用户访问的次数，可通过cookie统计访问量，相同用户切换IP地址，UV不变 </p><p>IP：网站被不同IP地址访问的总次数，可通过IP地址统计访问量，相同IP不同用户访问，IP不变</p><p><strong>解决方案</strong></p><ul><li>利用set集合的数据去重特征，记录各种访问数据</li><li>建立string类型数据，利用incr统计日访问量（PV）</li><li>建立set模型，记录不同cookie数量（UV）</li><li>建立set模型，记录不同IP数量（IP）</li></ul><p>Tips 11：</p><ul><li>redis 应用于同类型数据的快速去重</li></ul><p><strong>业务场景</strong></p><p>黑名单 </p><p>​    资讯类信息类网站追求高访问量，但是由于其信息的价值，往往容易被不法分子利用，通过爬虫技术，快速获取信息，个别特种行业网站信息通过爬虫获取分析后，可以转换成商业机密进行出售。例如第三方火车票、机票、酒店刷票代购软件，电商刷评论、刷好评。 </p><p>​    同时爬虫带来的伪流量也会给经营者带来错觉，产生错误的决策，有效避免网站被爬虫反复爬取成为每个网站都要考虑的基本问题。在基于技术层面区分出爬虫用户后，需要将此类用户进行有效的屏蔽，这就是黑名单的典型应用。 </p><p>​    ps:不是说爬虫一定做摧毁性的工作，有些小型网站需要爬虫为其带来一些流量。 </p><p>白名单 </p><p>​    对于安全性更高的应用访问，仅仅靠黑名单是不能解决安全问题的，此时需要设定可访问的用户群体，依赖白名单做更为苛刻的访问验证。</p><p><strong>解决方案</strong></p><ul><li>基于经营战略设定问题用户发现、鉴别规则</li><li>周期性更新满足规则的用户黑名单，加入set集合</li><li>用户行为信息达到后与黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li></ul><p>Tips 12：</p><ul><li>redis 应用于基于黑名单与白名单设定的服务控制</li></ul><h3 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h3><h4 id="sorted-set-类型"><a href="#sorted-set-类型" class="headerlink" title="sorted_set 类型"></a>sorted_set 类型</h4><ul><li><p>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</p></li><li><p>需要的存储结构：新的存储模型，可以保存可排序的数据</p></li><li><p>sorted_set类型：在set的存储结构基础上添加可排序字段</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731102628181.png" alt="image-20210731102628181"></p></li></ul><h4 id="sorted-set-类型数据的基本操作"><a href="#sorted-set-类型数据的基本操作" class="headerlink" title="sorted_set 类型数据的基本操作"></a>sorted_set 类型数据的基本操作</h4><ul><li><p>添加数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br><span class="line">#注意score在前</span><br><span class="line">zadd scores 100 zs</span><br><span class="line">zadd scores 34 gf</span><br></pre></td></tr></table></figure></li><li><p>获取全部数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">zrevrange key start stop [WITHSCORES] #反转</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key member [member ...]</span><br></pre></td></tr></table></figure></li><li><p>按条件获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrangebyscore scores 50 99 withscores linmit 0 3 #查询结果的0 1 2数据</span><br><span class="line"></span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br></pre></td></tr></table></figure></li><li><p>条件删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key start stop </span><br><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意：</p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop用于限定查询范围，作用于索引，表示开始和结束索引</li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ul></blockquote><ul><li><p>获取集合数据总量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zcard key</span><br><span class="line">zcount key min max</span><br></pre></td></tr></table></figure></li><li><p>集合交、并操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zinterstore destination numkeys key [key ...]</span><br><span class="line">#numkeys为集合个数，求交集时score会求和，也可以改为求最小最大</span><br><span class="line">zunionstore destination numkeys key [key ...]</span><br></pre></td></tr></table></figure></li></ul><h4 id="sorted-set-类型数据的扩展操作"><a href="#sorted-set-类型数据的扩展操作" class="headerlink" title="sorted_set 类型数据的扩展操作"></a>sorted_set 类型数据的扩展操作</h4><p><strong>业务场景</strong></p><p>票选广东十大杰出青年，各类综艺选秀海选投票 </p><p>各类资源网站TOP10（电影，歌曲，文档，电商，游戏等）</p><p>聊天室活跃度统计 </p><p>游戏好友亲密度</p><p><strong>业务分析</strong></p><ul><li>为所有参与排名的资源建立排序依据</li></ul><p><strong>解决方案</strong></p><ul><li><p>score值获取与修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key member </span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure></li><li><p>获取数据对应的索引（排名）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zscore key member </span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure></li></ul><p>Tips 13：</p><ul><li>redis 应用于计数器组合排序功能对应的排名</li></ul><h4 id="sorted-set-类型数据操作的注意事项"><a href="#sorted-set-类型数据操作的注意事项" class="headerlink" title="sorted_set 类型数据操作的注意事项"></a>sorted_set 类型数据操作的注意事项</h4><ul><li>score保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992</li><li>score保存的数据也可以是一个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时候要慎重</li><li>sorted_set 底层存储还是基于set结构的，因此数据不能重复，如果重复添加相同的数据，score值将被反复覆盖，保留最后一次修改的结果</li></ul><h4 id="sorted-set-类型应用场景"><a href="#sorted-set-类型应用场景" class="headerlink" title="sorted_set 类型应用场景"></a>sorted_set 类型应用场景</h4><p><strong>业务场景</strong></p><p>​    基础服务+增值服务类网站会设定各位会员的试用，让用户充分体验会员优势。例如观影试用VIP、游戏VIP体验、云盘下载体验VIP、数据查看体验VIP。当VIP体验到期后，如果有效管理此类信息。即便对于正式VIP用户也存在对应的管理方式。 </p><p>​    网站会定期开启投票、讨论，限时进行，逾期作废。如何有效管理此类过期信息。</p><p><strong>解决方案</strong></p><ul><li><p>对于基于时间线限定的任务处理，将处理时间记录为score值，利用排序功能区分处理的先后顺序</p></li><li><p>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间</p></li><li><p>当新任务加入时，判定并更新当前下一个要处理的任务时间</p></li><li><p>为提升sorted_set的性能，通常将任务根据特征存储成若干个sorted_set。例如1小时内，1天内，周内，月内，季内，年度等，操作时逐级提升，将即将操作的若干个任务纳入到1小时内处理的队列中</p></li><li><p>获取当前系统时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time</span><br></pre></td></tr></table></figure></li></ul><p>Tips 14：</p><ul><li>redis 应用于定时任务执行顺序管理或任务过期管理</li></ul><p><strong>业务场景</strong></p><p>任务/消息权重设定应用 当任务或者消息待处理，形成了任务队列或消息队列时，对于高优先级的任务要保障对其优先处理，如何实现任务权重管理。</p><p><strong>解决方案</strong></p><ul><li>对于带有权重的任务，优先处理权重高的任务，采用score记录权重即可 </li></ul><p>多条件任务权重设定</p><p>​    如果权重条件过多时，需要对排序score值进行处理，保障score值能够兼容2条件或者多条件，例如外贸订单优先于国内订单，总裁订单优先于员工订单，经理订单优先于员工订单</p><ul><li>因score长度受限，需要对数据进行截断处理，尤其是时间设置为小时或分钟级即可（折算后）</li><li>先设定订单类别，后设定订单发起角色类别，整体score长度必须是统一的，不足位补0。第一排序规则首位不得是0<ul><li>例如外贸101，国内102，经理004，员工008。</li><li>员工下的外贸单score值为101008（优先）</li><li>经理下的国内单score值为102004</li></ul></li></ul><p>Tips 15：</p><ul><li>redis 应用于即时任务/消息队列执行管理</li></ul><h3 id="数据类型实践案例"><a href="#数据类型实践案例" class="headerlink" title="数据类型实践案例"></a>数据类型实践案例</h3><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><p><strong>解决方案</strong></p><ul><li><p>设计计数器，记录调用次数，用于控制业务执行次数。以用户id作为key，使用次数作为valu</p></li><li><p>在调用前获取次数，判断是否超过限定次数 </p><p>​    不超过次数的情况下，每次调用计数+1 </p><p>​    业务调用失败，计数-1</p></li><li><p>为计数器设置生命周期为指定周期，例如1秒/分钟，自动清空周期内使用次数</p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731103753736.png" alt="image-20210731103753736"></p></li></ul><p><strong>解决方案改良</strong></p><ul><li><p>取消最大值的判定，利用incr操作超过最大值抛出异常的形式替代每次判断是否大于最大值</p></li><li><p>判断是否为nil， </p><p>​    如果是，设置为Max-次数 </p><p>​    如果不是，计数+1 </p><p>​    业务调用失败，计数-1</p></li><li><p>遇到异常即+操作超过上限，视为使用达到上限</p></li></ul><p>Tips 16：</p><ul><li>edis 应用于限时按次结算的服务控制</li></ul><h4 id="业务场景-1"><a href="#业务场景-1" class="headerlink" title="业务场景"></a>业务场景</h4><p>使用微信的过程中，当微信接收消息后，会默认将最近接收的消息置顶，当多个好友及关注的订阅号同时发送消息时，该排序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户离线后，再次打开微信时，消息该按照什么样的顺序显示？</p><p><strong>业务分析</strong></p><p><img src="/2021/08/04/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/02_redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/image-20210731104531736.png" alt="image-20210731104531736"></p><p><strong>解决方案</strong></p><ul><li>依赖list的数据具有顺序的特征对消息进行管理，将list结构作为栈使用</li><li>对置顶与普通会话分别创建独立的list分别管理</li><li>当某个list中接收到用户消息后，将消息发送方的id从list的一侧加入list（此处设定左侧）</li><li>多个相同id发出的消息反复入栈会出现问题，在入栈之前无论是否具有当前id对应的消息，先删除对应id</li><li>推送消息时先推送置顶会话list，再推送普通会话list，推送完成的list清除所有数据</li><li>消息的数量，也就是微信用户对话数量采用计数器的思想另行记录，伴随list操作同步更新</li></ul><p>Tips 17：</p><ul><li>redis 应用于基于时间顺序的数据操作，而不关注具体时间</li></ul><h3 id="解决方案列表"><a href="#解决方案列表" class="headerlink" title="解决方案列表"></a>解决方案列表</h3><ul><li>Tips 1：redis用于控制数据库表主键id，为数据库表主键提供生成策略，保障数据库表的主键唯一性</li><li>Tips 2：redis 控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</li><li>Tips 3：redis应用于各种结构型和非结构型高热度数据访问加速</li><li>Tips 4：redis 应用于购物车数据存储设计</li><li>Tips 5：redis 应用于抢购，限购类、限量发放优惠卷、激活码等业务的数据存储设计</li><li>Tips 6：redis 应用于具有操作先后顺序的数据控制</li><li>Tips 7：redis 应用于最新消息展示</li><li>Tips 8：redis 应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热卖旅游线路，应用APP推荐，大V推荐等</li><li>Tips 9：redis 应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>Tips 10：redis 应用于同类型不重复数据的合并、取交集操作</li><li>Tips 11：redis 应用于同类型数据的快速去重</li><li>Tips 12：redis 应用于基于黑名单与白名单设定的服务控制</li><li>Tips 13：redis 应用于计数器组合排序功能对应的排名</li><li>Tips 14：redis 应用于定时任务执行顺序管理或任务过期管理</li><li>Tips 15：redis 应用于及时任务/消息队列执行管理</li><li>Tips 16：redis 应用于按次结算的服务控制</li><li>Tips 17：redis 应用于基于时间顺序的数据操作，而不关注具体时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;02-redis-数据类型&quot;&gt;&lt;a href=&quot;#02-redis-数据类型&quot; class=&quot;headerlink&quot; title=&quot;02_redis 数据类型&quot;&gt;&lt;/a&gt;02_redis 数据类型&lt;/h2&gt;&lt;h3 id=&quot;数据存储类型介绍&quot;&gt;&lt;a href=&quot;#数</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot_day02</title>
    <link href="http://example.com/2021/08/01/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/Spring_boot/SpringBoot_day02/"/>
    <id>http://example.com/2021/08/01/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/Spring_boot/SpringBoot_day02/</id>
    <published>2021-08-01T13:55:34.000Z</published>
    <updated>2021-08-03T08:37:16.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot-原理分析"><a href="#SpringBoot-原理分析" class="headerlink" title="SpringBoot 原理分析"></a>SpringBoot 原理分析</h2><h3 id="SpringBoot自动配置"><a href="#SpringBoot自动配置" class="headerlink" title="SpringBoot自动配置"></a>SpringBoot自动配置</h3><h4 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h4><p>是在 Spring 4.0 增加的条件判断功能，通过这个可以功能可以实现选择性的创建 Bean 操作。</p><p>SpringBoot是如何知道要创建哪个 Bean 的？比如 SpringBoot 是如何知道要创建 RedisTemplate 的？</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动SpringBoot的应用，返回Spring的IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Test1Application.class, args);</span><br><span class="line">        <span class="comment">//获取Bean，redisTemplate</span></span><br><span class="line">        Object redisTemplate = context.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring会根据Condition判断有没有redis对应的字节码文件，有就创建Bean。</p><p><strong>案例</strong>：需求<br>在Spring 的 IOC 容器中有一个 User 的 Bean ，现要求</p><ol><li>导入 Jedis 坐标后，加载该 Bean ，没导入，则不加载。</li><li>将类的判断定义为动态的。判断哪个字节码文件存在可以动态指定。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意实现的是spirngframework.context.annotation包下的条件接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//导入 Jedis 坐标后，加载该 Bean，否则不会创建该bean，并会抛出异常</span></span><br><span class="line">        <span class="comment">//判断：redis.clients.jedis.Jedis文件是否存在</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;redis.clients.jedis.Jedis&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ClassCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动SpringBoot的应用，返回Spring的IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Test1Application.class, args);</span><br><span class="line">        Object user = context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>将类的判断设置为动态的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意实现的是spirngframework.context.annotation包下的条件接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conditionContext 上下文对象。用于获取环境，IOC容器，ClassLoader对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotatedTypeMetadata 注解元对象。可以用于获取注解定义的属性值。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//导入 Jedis 坐标后，加载该 Bean</span></span><br><span class="line">        <span class="comment">//判断：redis.clients.jedis.Jedis文件是否存在</span></span><br><span class="line">        Map&lt;String, Object&gt; map = annotatedTypeMetadata.getAnnotationAttributes(ConditionOnClass.class.getName());</span><br><span class="line">        String[] value = (String[])map.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(String className : value)&#123;</span><br><span class="line">                Class&lt;?&gt; aClass = Class.forName(className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(ClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionOnClass &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="comment">//    @Conditional(ClassCondition.class)</span></span><br><span class="line">    <span class="meta">@ConditionOnClass(&quot;redis.clients.jedis.Jedis&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(name = &quot;itcast&quot;,havingValue = &quot;itheima&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="attr">itcast</span>=<span class="string">itheima</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动SpringBoot的应用，返回Spring的IOC容器</span></span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(Test1Application.class, args);</span><br><span class="line">        Object user1 = context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        Object user2 = context.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Condition小结"><a href="#Condition小结" class="headerlink" title="Condition小结"></a>Condition小结</h4><ul><li><p>自定义条件：</p><ol><li><p>定义条件类：自定义类实现 Condition 接口，重写 matches 方法，在 matches 方法中进行逻辑判断，返回boolean 值 。  matches 方法两个参数：</p><ol><li>context ：上下文对象，可以获取属性值，获取类加载器，获取 BeanFactory 等。</li><li>metadata ：元数据对象，用于获取注解属性。</li></ol></li><li><p>判断条件： 在初始化 Bean 时，使用 @Conditional 条件类 class 注解</p></li></ol></li><li><p>SpringBoot 提供的常用条件注解：<br>• ConditionalOnProperty 判断配置文件中是否有对应属性和值才初始化 Bean<br>• ConditionalOnClass 判断环境中是否有对应字节码文件才初始化 Bean<br>• ConditionalOnMissingBean 判断环境中没有对应 Bean 才初始化 Bean</p></li></ul><h4 id="切换内置web-服务器"><a href="#切换内置web-服务器" class="headerlink" title="切换内置web 服务器"></a>切换内置web 服务器</h4><p>SpringBoot的 web 环境中默认使用 tomcat 作为内置服务器，其实 SpringBoot 提供了 4 中内置服务器供我们选择，我们可以很方便的进行切换。Jetty，Netty，Tomcat，Undertow。</p><p>引入web环境依赖，会自动加入tomcat服务器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更改为使用Jetty服务器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除tomcat依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入jetty的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Enable注解"><a href="#Enable注解" class="headerlink" title="@Enable注解"></a>@Enable注解</h4><p>SpringBoot中提供了很多 Enable 开头的注解，这些注解都是用于动态启用某些功能的。而其底层原理是使用 @Import 注解导入一些配置类，实现 Bean 的动态加载。</p><p>SpringBoot工程是否可以直接获取 jar 包（第三方）中定义的 Bean?</p><p>不可以</p><p>other模块中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Enable模块中内容：</p><p>获取另外一模块内容，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-enable-other<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootenable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span> 扫描范围：当前引导类所在包及其子包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * com.itheima.springbootenable</span></span><br><span class="line"><span class="comment"> * com.itheima.config</span></span><br><span class="line"><span class="comment"> * //1.使用<span class="doctag">@ComponentScan</span>扫描com.itheima.config包</span></span><br><span class="line"><span class="comment"> * //2.可以使用<span class="doctag">@Import</span>注解，加载类。这些类都会被Spring创建，并放入IOC容器</span></span><br><span class="line"><span class="comment"> * //3.可以对Import注解进行封装。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@ComponentScan(&quot;com.itheima.config&quot;)</span></span><br><span class="line"><span class="comment">//@Import(UserConfig.class)</span></span><br><span class="line"><span class="meta">@EnableUser</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootEnableApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Bean</span></span><br><span class="line">        Object user = context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解需要在other模块下建立此注解。</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(UserConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableUser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Import注解"><a href="#Import注解" class="headerlink" title="@Import注解"></a>@Import注解</h4><p>@Enable 底层依赖于 @Import 注解导入一些类，使用 @Import 导入的类会被 Spring 加载到 IOC 容器中。而 @Import 提供 4 种用法:</p><ol><li>导入 Bean</li><li>导入配置类</li><li>导入 ImportSelector 实现类。一般用于加载配置文件中的类</li><li>导入 ImportBeanDefinitionRegistrar 实现类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootenable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Import4中用法：</span></span><br><span class="line"><span class="comment"> *  1. 导入Bean</span></span><br><span class="line"><span class="comment"> *  2. 导入配置类</span></span><br><span class="line"><span class="comment"> *  3. 导入ImportSelector的实现类。</span></span><br><span class="line"><span class="comment"> *  4. 导入ImportBeanDefinitionRegistrar实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Import(User.class)</span></span><br><span class="line"><span class="comment">//@Import(UserConfig.class)</span></span><br><span class="line"><span class="comment">//@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="comment">//@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootEnableApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line">        User user = context.getBean(User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        Role role = context.getBean(Role.class);</span><br><span class="line">        System.out.println(role);</span><br><span class="line">       <span class="comment">/* Map&lt;String, User&gt; map = context.getBeansOfType(User.class);</span></span><br><span class="line"><span class="comment">        System.out.println(map);*/</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">/*  Object user = context.getBean(&quot;user&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(user);</span></span><br><span class="line"><span class="comment">        //第四种方法，起的名称叫做user</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Role;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="comment">//使用import导入类，可以省略该注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">role</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Role();</span><br><span class="line">    &#125;<span class="comment">//role和user一样，就是个domain包下的类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种方式：other模块中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportSelector;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">&quot;com.itheima.domain.User&quot;</span>, <span class="string">&quot;com.itheima.domain.Role&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//字符串可以从配置文件中获取。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种方式：other模块中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.AbstractBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AbstractBeanDefinition beanDefinition = BeanDefinitionBuilder.rootBeanDefinition(User.class).getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EnableAutoConfiguration注解"><a href="#EnableAutoConfiguration注解" class="headerlink" title="@EnableAutoConfiguration注解"></a>@EnableAutoConfiguration注解</h4><ul><li>@EnableAutoConfiguration（位于@SpringApplicaton中） 注解内部使用 @Import(AutoConfigurationImportSelector.class) 来加载配置类。</li><li>配置文件位置： <code>META INF/spring.factories</code> ，该配置文件中定义了大量的配置类，当 SpringBoot 应用启动时，会自动加载这些配置类，初始化 Bean</li><li>并不是所有的 Bean 都会被初始化，在配置类中使用 Condition 来加载满足条件的 Bean</li></ul><blockquote><p>依赖可以在mvnrepository.com网站搜索如使用mybatis 可以搜索 mybatis spring-boot。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三方提供的依赖会把名字放前面--&gt;</span></span><br></pre></td></tr></table></figure><p>案例：需求</p><p>自定义redis starter 。要求当导入 redis 坐标时， SpringBoot 自动创建 Jedis 的 Bean</p><p>案例：实现步骤</p><ol><li>创建 redis spring boot autoconfigure 模块</li><li>创建 redis spring boot starter 模块 依赖 redis springboot autoconfigure 的模块</li><li>在 redis spring boot autoconfigure 模块中初始化 Jedis 的Bean 。并定义 META INF/ spring.factories 文件</li><li>在测试模块中引入自定义的 redis starter 依赖，测试获取Jedis 的 Bean ，操作 redis 。</li></ol><p><strong>创建redis-spring-boot-autoconfigure模块（包名为configure）</strong></p><p>引入jedis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建核心配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.redis.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span><span class="comment">//使RedisProperties类被spring识别</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(Jedis.class)</span><span class="comment">//Jedis在的时候才会加载Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供Jedis的bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;jedis&quot;)</span><span class="comment">//如果没有叫做jedis的Bean才会加载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">jedis</span><span class="params">(RedisProperties redisProperties)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RedisAutoConfiguration....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jedis(redisProperties.getHost(), redisProperties.getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建实体类 将实体类于配置文件相绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.redis.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">6379</span>;</span><br><span class="line"><span class="comment">//getter setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在resources目录下新建<code>META-INF/spring.factories</code>文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">  com.itheima.redis.config.RedisAutoConfiguration</span></span><br></pre></td></tr></table></figure><p><strong>创建redis-spring-boot-starter模块（包名为redis）</strong></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入configure--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用enable模块</strong></p><p>引入自定义的模块依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义的redis的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootenable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootEnableApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = SpringApplication.run(SpringbootEnableApplication.class, args);</span><br><span class="line"></span><br><span class="line">        Jedis jedis = context.getBean(Jedis.class);</span><br><span class="line">        System.out.println(jedis);</span><br><span class="line"></span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        String name = jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;<span class="comment">//会打印RedisAutoConfiguration....</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">jedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span>  Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    &#125;<span class="comment">//不会打印RedisAutoConfiguration.... ，证明ConditionalOnMissingBean生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis.port</span>=<span class="string">6666</span></span><br><span class="line"><span class="comment">#链接会失败，证明生效</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot监听机制"><a href="#SpringBoot监听机制" class="headerlink" title="SpringBoot监听机制"></a>SpringBoot监听机制</h3><h4 id="Java的监听机制"><a href="#Java的监听机制" class="headerlink" title="Java的监听机制"></a>Java的监听机制</h4><p>SpringBoot监听机制，其实是对 Java 提供的事件监听机制的封装。<br>Java中的事件监听机制定义了以下几个角色：</p><ol><li>事件： Event ，继承 java.util.EventObject 类的对象</li><li>事件源： Source ，任意对象 Object</li><li>监听器： Listener ，实现 java.util.EventListener 接口 的对象</li></ol><h4 id="SpringBoot监听机制-1"><a href="#SpringBoot监听机制-1" class="headerlink" title="SpringBoot监听机制"></a>SpringBoot监听机制</h4><p>SpringBoot在项目启动时，会对几个监听器进行回调，我们可以实现这些监听器接口，在项目启动时完成一些操作。<br>ApplicationContextInitializer、 SpringApplicationRunListener 、 CommandLineRunner 、ApplicationRunner</p><p>前两个类想要生效需要先配置<code>META-INF/spring.factories</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationContextInitializer=com.itheima.springbootlistener.listener.MyApplicationContextInitializer</span><br><span class="line"></span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=com.itheima.springbootlistener.listener.MySpringApplicationRunListener</span><br></pre></td></tr></table></figure><p>新建MyApplicationContextInitializer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootlistener.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextInitializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationContextInitializer....initialize&quot;</span>);</span><br><span class="line">        <span class="comment">//可以用于项目还没有准备IOC容器之前检测一些资源是否存在。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建MySpringApplicationRunListener类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootlistener.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SpringApplication 为项目启动时 事件源，可以产生很多生命周期事件 该构造不能省略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpringApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;starting...项目启动中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;environmentPrepared...环境对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextPrepared...上下文对象开始准备&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;contextLoaded...上下文对象开始加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;started...上下文对象加载完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running...项目启动完成，开始运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;failed...项目启动失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建MyCommandLineRunner类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootlistener.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="comment">//与下面那种用法基本相同</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CommandLineRunner...run&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.asList(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建MyApplicationRunner类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.springbootlistener.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationArguments;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ApplicationRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当项目启动后执行run方法。可以执行缓存预热，如让redis在项目启动时把数据库信息提前加载到缓存，</span></span><br><span class="line"><span class="comment"> * 防止第一个人查询时缓存里没有数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ApplicationRunner...run&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.asList(args.getSourceArgs()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot-启动流程分析"><a href="#SpringBoot-启动流程分析" class="headerlink" title="SpringBoot 启动流程分析"></a>SpringBoot 启动流程分析</h3><h4 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h4><p><img src="/2021/08/01/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/Spring_boot/SpringBoot_day02/SpringBoot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png" alt="SpringBoot启动流程"></p><h2 id="Spring-Boot-监控"><a href="#Spring-Boot-监控" class="headerlink" title="Spring Boot 监控"></a>Spring Boot 监控</h2><h4 id="SpringBoot监控概述"><a href="#SpringBoot监控概述" class="headerlink" title="SpringBoot监控概述"></a>SpringBoot监控概述</h4><p>SpringBoot自带监控功能 Actuator ，可以帮助实现对程序内部运行情况监控，比如监控状况、 Bean 加载情况、配置属性、日志信息等。</p><h4 id="SpringBoot监控使用"><a href="#SpringBoot监控使用" class="headerlink" title="SpringBoot监控使用"></a>SpringBoot监控使用</h4><p>使用步骤</p><ol><li><p>导入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在Ops中可以直接勾选--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问 <a href="http://localhost:8080/acruator">http://localhost:8080/acruator</a></p></li></ol><table><thead><tr><th><strong>路径</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>/beans</td><td>描述应用程序上下文里全部的Bean，以及它们的关系</td></tr><tr><td>/env</td><td>获取全部环境属性</td></tr><tr><td>/env/{name}</td><td>根据名称获取特定的环境属性值</td></tr><tr><td>/health</td><td>报告应用程序的健康指标，这些值由HealthIndicator的实现类提供</td></tr><tr><td>/info</td><td>获取应用程序的定制信息，这些信息由info打头的属性提供（配置文件中）</td></tr><tr><td>/mappings</td><td>描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td></tr><tr><td>/metrics</td><td>报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td></tr><tr><td>/metrics/{name}</td><td>报告指定名称的应用程序度量值</td></tr><tr><td>/trace</td><td>提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)</td></tr></tbody></table><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">info.name</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="meta">info.age</span>=<span class="string">22</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启健康检查的完整信息，为了安全默认为关闭，有up和 down两种状态</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#将web的所有的监控endpoint暴露出来</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><h4 id="SpringBoot监控-Spring-Boot-Admin"><a href="#SpringBoot监控-Spring-Boot-Admin" class="headerlink" title="SpringBoot监控 Spring Boot Admin"></a>SpringBoot监控 Spring Boot Admin</h4><ul><li>Spring Boot Admin 是一个开源社区项目，用于管理和监控 SpringBoot 应用程序。</li><li>Spring Boot Admin 有两个角色，客户端 ( 和服务端 ）。</li><li>应用程序作为 Spring Boot Admin Client 向为 Spring Boot Admin Server 注册</li><li>Spring Boot Admin Server 的 UI 界面将 Spring Boot Admin Client 的 Actuator Endpoint 上的一些监控信息。</li></ul><p>使用步骤</p><p>admin-server（可以监控多个client模块）</p><ol><li><p>创建 admin server 模块</p></li><li><p>导入依赖坐标<code>spring-boot-admin-starter-server</code> 和web模块</p></li><li><p>在引导类上启用监控功能 EnableAdminServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个项目在一个地址，端口都是8080会重复，为方便，更改下端口</p><p>新建application.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9000</span></span><br></pre></td></tr></table></figure></li></ol><p>admin-client</p><ol><li><p>创建 admin client 模块</p></li><li><p>导入依赖坐标<code>spring-boot-admin-starter-client</code> 和web模块</p></li><li><p>配置相关信息： server 地址等</p><p>application.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行admin.server地址</span></span><br><span class="line"><span class="meta">spring.boot.admin.client.url</span>=<span class="string">http://localhost:9000</span></span><br><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure></li><li><p>启动 server 和 client 服务，访问 server（localhost:9000）</p></li></ol><h2 id="SpringBoot-项目部署"><a href="#SpringBoot-项目部署" class="headerlink" title="SpringBoot 项目部署"></a>SpringBoot 项目部署</h2><h4 id="SpringBoot项目部署"><a href="#SpringBoot项目部署" class="headerlink" title="SpringBoot项目部署"></a>SpringBoot项目部署</h4><p>SpringBoot项目开发完毕后，支持两种方式部署到服务器：</p><ol><li><p>jar 包 官方推荐</p><p>创建deploy模块，导入web依赖，新建一个Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;succcess&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用在Maven Project中点击package打为jar包（默认极为打为jar包）</p><p>将jar包放在服务器 执行<code>java -jar .\*.jar</code>即可</p></li><li><p>war 包</p><p>更改项目中的pom文件<code>&lt;packaging&gt;war&lt;/packaging&gt;</code> </p><p>更改引导类继承SpringBootServletInitializer类，重写configure方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDeployApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDeployApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(SpringbootDeployApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将war包放在tomcat的webapps目录下，启动Tomcat即可。</p><p>访问地址为<code>localhost:8080/springboot/user/findAll</code>,spirngboot为war包名称，也是在tomcat中的虚拟目录。</p><p>内置更改的端口号也不会生效，这时更改端口号需要在Tomcat的外置配置文件中更改。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SpringBoot-原理分析&quot;&gt;&lt;a href=&quot;#SpringBoot-原理分析&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 原理分析&quot;&gt;&lt;/a&gt;SpringBoot 原理分析&lt;/h2&gt;&lt;h3 id=&quot;SpringBoot自动配</summary>
      
    
    
    
    
    <category term="黑马程序员 springboot" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-springboot/"/>
    
  </entry>
  
  <entry>
    <title>01_redis入门</title>
    <link href="http://example.com/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/</id>
    <published>2021-07-31T08:47:55.000Z</published>
    <updated>2021-08-04T03:07:59.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h2><h3 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h3><p>12306    </p><h4 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h4><ul><li>海量用户</li><li>高并发</li></ul><h4 id="罪魁祸首——关系型数据库"><a href="#罪魁祸首——关系型数据库" class="headerlink" title="罪魁祸首——关系型数据库"></a>罪魁祸首——关系型数据库</h4><ul><li><p>性能瓶颈：磁盘IO性能低下</p></li><li><p>扩展瓶颈：数据关系复杂，扩展性差，不便于大规模集群</p></li></ul><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>Nosql：</p><ul><li>降低磁盘IO次数，越低越好  —— 内存存储</li><li>去除数据间关系，越简单越好 —— 不存储关系，仅存储数据</li></ul><h4 id="Nosql"><a href="#Nosql" class="headerlink" title="Nosql"></a>Nosql</h4><p>NoSQL：即 Not-Only SQL（ 泛指非关系型的数据库），作为关系型数据库的补充。</p><p>作用：应对基于海量用户和海量数据前提下的数据处理问题。</p><p>特征：</p><ul><li><p>可扩容，可伸缩</p></li><li><p>大数据量下高性能</p></li><li><p>灵活的数据模型</p></li><li><p>高可用</p></li></ul><p>常见 Nosql 数据库：</p><ul><li>Redis</li><li>memcache</li><li>HBase</li><li>MongoDB</li></ul><h4 id="解决方案（电商场景）"><a href="#解决方案（电商场景）" class="headerlink" title="解决方案（电商场景）"></a>解决方案（电商场景）</h4><p><img src="/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/image-20210730193933332.png" alt="image-20210730193933332"></p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>概念：Redis (REmote DIctionary Server) 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。</p><p>特征：</p><ol><li><p>数据间没有必然的关联关系</p></li><li><p>内部采用单线程机制进行工作</p></li><li><p>高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s。</p></li><li><p>多数据类型支持</p><ul><li>字符串类型     string</li><li>列表类型         list</li><li>散列类型         hash</li><li>集合类型         set</li><li>有序集合类型 sorted_set</li></ul></li><li><p>持久化支持。可以进行数据灾难恢复</p></li></ol><h4 id="Redis-的应用"><a href="#Redis-的应用" class="headerlink" title="Redis 的应用"></a>Redis 的应用</h4><ul><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session 分离</li><li>消息队列</li><li>分布式锁</li></ul><h3 id="Redis-的下载与安装"><a href="#Redis-的下载与安装" class="headerlink" title="Redis 的下载与安装"></a>Redis 的下载与安装</h3><h4 id="Redis-的下载"><a href="#Redis-的下载" class="headerlink" title="Redis 的下载"></a>Redis 的下载</h4><p>Linux 版（适用于企业级开发）</p><ul><li>Redis 高级开始使用</li><li>以4.0 版本作为主版本</li></ul><p>Windows 版本（适合零基础学习）</p><ul><li>Redis 入门使用</li><li>以 3.2 版本作为主版本</li><li>下载地址：<a href="https://github.com/MSOpenTech/redis/tags">https://github.com/MSOpenTech/redis/tags</a></li></ul><h4 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h4><p><img src="/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/image-20210730180902991.png" alt="image-20210730180902991"></p><h4 id="启动-Redis"><a href="#启动-Redis" class="headerlink" title="启动 Redis"></a>启动 Redis</h4><p>服务器启动</p><p><img src="/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/image-20210730180928793.png" alt="image-20210730180928793"></p><p>端口：6379 PID：随机生成</p><p>客户端连接</p><p><img src="/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/image-20210730181014333.png" alt="image-20210730181014333"></p><h3 id="Redis-的基本操作"><a href="#Redis-的基本操作" class="headerlink" title="Redis 的基本操作"></a>Redis 的基本操作</h3><h4 id="命令行模式工具使用思考"><a href="#命令行模式工具使用思考" class="headerlink" title="命令行模式工具使用思考"></a>命令行模式工具使用思考</h4><ul><li>功能性命令</li><li>清除屏幕信息</li><li>帮助信息查阅</li><li>退出指令</li></ul><h4 id="信息添加"><a href="#信息添加" class="headerlink" title="信息添加"></a>信息添加</h4><ul><li><p>功能：设置 key，value 数据</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set name itheima</span><br></pre></td></tr></table></figure></li></ul><h4 id="信息查询"><a href="#信息查询" class="headerlink" title="信息查询"></a>信息查询</h4><ul><li><p>功能：根据 key 查询对应的 value，如果不存在，返回空（nil）</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure></li><li><p>范例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure></li></ul><h4 id="清除屏幕信息"><a href="#清除屏幕信息" class="headerlink" title="清除屏幕信息"></a>清除屏幕信息</h4><ul><li><p>功能：清除屏幕中的信息</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure></li></ul><h4 id="退出客户端命令行模式"><a href="#退出客户端命令行模式" class="headerlink" title="退出客户端命令行模式"></a>退出客户端命令行模式</h4><ul><li><p>功能：退出客户端</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit </span><br><span class="line">exit </span><br><span class="line">&lt;ESC&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h4><ul><li><p>功能：获取命令帮助文档，获取组中所有命令信息名称</p></li><li><p>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">help 命令名称 </span><br><span class="line">help @组名</span><br></pre></td></tr></table></figure><p><img src="/2021/07/31/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/redis/01_redis%E5%85%A5%E9%97%A8/image-20210730181545125.png" alt="image-20210730181545125"></p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Redis 入门</strong></p><ol><li>Redis 简介</li><li>Redis 的下载与安装</li><li>Redis 的基本操作</li></ol><ul><li>set/get</li><li>clear</li><li>help</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis入门&quot;&gt;&lt;a href=&quot;#Redis入门&quot; class=&quot;headerlink&quot; title=&quot;Redis入门&quot;&gt;&lt;/a&gt;Redis入门&lt;/h2&gt;&lt;h3 id=&quot;Redis-简介&quot;&gt;&lt;a href=&quot;#Redis-简介&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="黑马程序员" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot_day01</title>
    <link href="http://example.com/2021/07/30/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/Spring_boot/SpringBoot_day01/"/>
    <id>http://example.com/2021/07/30/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/Spring_boot/SpringBoot_day01/</id>
    <published>2021-07-30T08:04:16.000Z</published>
    <updated>2021-07-30T08:05:50.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot-概述"><a href="#SpringBoot-概述" class="headerlink" title="SpringBoot 概述"></a>SpringBoot 概述</h3><h4 id="SpringBoot-概念"><a href="#SpringBoot-概念" class="headerlink" title="SpringBoot 概念"></a>SpringBoot 概念</h4><p>SpringBoot提供了一种快速使用Spring的方式，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。2014 年4 月，Spring Boot 1.0.0 发布。Spring的顶级项目之一(<a href="https://spring.io)./">https://spring.io)。</a></p><h4 id="Spring-缺点"><a href="#Spring-缺点" class="headerlink" title="Spring 缺点"></a>Spring 缺点</h4><p>1）配置繁琐</p><p>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但它要求的回报也不少。</p><p>2）依赖繁琐</p><p>项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。</p><h4 id="SpringBoot-功能"><a href="#SpringBoot-功能" class="headerlink" title="SpringBoot 功能"></a>SpringBoot 功能</h4><p>1）自动配置</p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是SpringBoot自动完成的。</p><p>2）起步依赖</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p><p>3）辅助功能</p><p>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等。</p><p>Spring Boot 并不是对Spring 功能上的增强，而是提供了一种快速使用Spring 的方式。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>SpringBoot提供了一种快速开发Spring项目的方式，而不是对Spring功能上的增强。</p><p>Spring的缺点：</p><ul><li>配置繁琐</li><li>依赖繁琐</li></ul><p>SpringBoot功能：</p><ul><li>自动配置</li><li>起步依赖：依赖传递</li><li>辅助功能</li></ul><h4 id="SpringBoot-快速入门"><a href="#SpringBoot-快速入门" class="headerlink" title="SpringBoot 快速入门"></a>SpringBoot 快速入门</h4><p>案例：需求</p><p>搭建SpringBoot工程，定义HelloController.hello()方法，返回”Hello SpringBoot!”。</p><p>案例：实现步骤</p><p>①创建Maven项目<br>②导入SpringBoot起步依赖<br>③定义Controller<br>④编写引导类<br>⑤启动测试</p><p>步骤</p><ol><li>新建maven项目（不适用模板）</li><li>pom.xml文件中引入依赖，在官方文档中寻找Getting Started，将parent和denpendencies内容复制到pom.xml文件中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot工程需要继承的父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--功能：写配置文件的时候会给提示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//@RestController注解相当于@ResponseBody ＋ @Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写引导类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 引导类 一般以Application结尾, SpringBoot项目的入口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplication</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(HelloApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行 访问 <code>localhost:8080/hello</code>即可</li></ol><p>小结</p><ul><li>SpringBoot在创建项目时，使用jar的打包方式。</li><li>SpringBoot的引导类，是项目入口，运行main方法就可以启动项目。</li><li>使用SpringBoot和Spring构建的项目，业务代码编写方式完全一样。</li></ul><p>案例：需求</p><p>使用idea搭建SpringBoot工程，定义HelloController.hello()方法，返回”Hello SpringBoot!”。</p><p>案例：步骤</p><ol><li>新建Spring Initializr项目（需要联网）</li><li>选择依赖 点击web，勾选Spring Web </li><li>编写Controller类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>启动</li></ol><h4 id="SpringBoot-起步依赖原理分析"><a href="#SpringBoot-起步依赖原理分析" class="headerlink" title="SpringBoot 起步依赖原理分析"></a>SpringBoot 起步依赖原理分析</h4><p>起步依赖原理分析</p><p>1）spring-boot-starter-parent</p><p>2）spring-boot-starter-web</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><ul><li>在spring-boot-starter-parent中定义了各种技术的版本信息，组合了一套最优搭配的技术版本。</li><li>在各种starter中，定义了完成该功能需要的坐标合集，其中大部分版本信息来自于父工程。</li><li>我们的工程继承parent，引入starter后，通过依赖传递，就可以简单方便获得需要的jar包，并且不会存在版本冲突等问题。</li></ul><h3 id="SpringBoot-配置"><a href="#SpringBoot-配置" class="headerlink" title="SpringBoot 配置"></a>SpringBoot 配置</h3><h4 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h4><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p><ul><li><p>properties：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=8080</span></span><br></pre></td></tr></table></figure></li><li><p>yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>注意：冒号和8080之间必须有空格。</p></li><li><p>SpringBoot提供了2种配置文件类型：properteis和yml/yaml</p></li><li><p>默认配置文件名称：application</p></li><li><p>在同一级目录下优先级为：properties &gt; yml &gt; yaml</p></li></ul><h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h4><p>YAML全称是YAML Ain’t Markup Language 。YAML是一种直观的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如：C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁。<br>YAML文件的扩展名可以使用.yml或者.yaml。</p><ul><li>properties:<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="meta">server.address</span>=<span class="string">127.0.0.1</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>简洁，以数据为核心</p><h4 id="YAML：基本语法"><a href="#YAML：基本语法" class="headerlink" title="YAML：基本语法"></a>YAML：基本语法</h4><ul><li>大小写敏感</li><li>数据值前边必须有空格，作为分隔符</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格（各个系统Tab对应的空格数目可能不同，导致层次混乱，idea会自动转换空格）。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">abc</span></span><br></pre></td></tr></table></figure><h4 id="YAML：数据格式"><a href="#YAML：数据格式" class="headerlink" title="YAML：数据格式"></a>YAML：数据格式</h4><ul><li><p>对象(map)：键值对的集合</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">zhangsan</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组：一组按次序排列的值</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">address:</span></span><br><span class="line">    <span class="string">-beijing</span></span><br><span class="line">    <span class="string">-shanghai</span></span><br><span class="line"><span class="comment"># 行内写法</span></span><br><span class="line"><span class="attr">address:</span> [<span class="string">beijing</span>,<span class="string">shanghai</span>]</span><br></pre></td></tr></table></figure><ul><li>纯量：单个的、不可再分的值</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">msg1:</span> <span class="string">&#x27;hello \n world&#x27;</span>  <span class="comment"># 单引忽略转义字符，原样输出</span></span><br><span class="line"><span class="attr">msg2:</span> <span class="string">&quot;hello \n world&quot;</span>  <span class="comment"># 双引识别转义字符</span></span><br></pre></td></tr></table></figure><h4 id="YAML：参数引用"><a href="#YAML：参数引用" class="headerlink" title="YAML：参数引用"></a>YAML：参数引用</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;name&#125;</span>  <span class="comment"># 引用上边定义的name值</span></span><br></pre></td></tr></table></figure><h4 id="YAML：小结"><a href="#YAML：小结" class="headerlink" title="YAML：小结"></a>YAML：小结</h4><p>1）配置文件类型</p><ul><li>properties：和以前一样</li><li>yml/yaml：注意空格</li></ul><p>2）yaml：简洁，以数据为核心</p><ul><li>基本语法<ul><li>大小写敏感</li><li>数据值前边必须有空格，作为分隔符</li><li>使用空格缩进表示层级关系，相同缩进表示同一级</li></ul></li><li>数据格式<ul><li>对象</li><li>数组: 使用“-”表示数组每个元素</li><li>纯量</li></ul></li><li>参数引用<ul><li>${key}</li></ul></li></ul><h4 id="读取配置内容"><a href="#读取配置内容" class="headerlink" title="读取配置内容"></a>读取配置内容</h4><p>1）@Value</p><p>2）Environment</p><p>3）@ConfigurationProperties </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span><span class="comment">//要和yml中名字相同</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name2;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;address[0]&#125;&quot;)</span><span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">private</span> String address1;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;person.name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;address[0]&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    ..getter setter toString方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h4><p>我们在开发Spring Boot应用时，通常同一套程序会被安装到不同环境，比如：开发、测试、生产等。其中数据库地址、服务器端口等等配置都不同，如果每次打包时，都要修改配置文件，那么非常麻烦。profile功能就是来进行动态配置切换的。</p><p>1）profile配置方式</p><ul><li>多profile文件方式（需要在application.properties激活）</li></ul><p>application-dev.properties </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>: <span class="string">8081</span></span><br></pre></td></tr></table></figure><p>application-test.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>: <span class="string">8082</span></span><br></pre></td></tr></table></figure><p>application-pro.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>: <span class="string">8083</span></span><br></pre></td></tr></table></figure><ul><li>yml多文档方式 application.yml文件内容</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">dev</span>    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#激活</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>2）profile激活方式</p><ul><li>配置文件<br>application.properties<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure></li><li>虚拟机参数<br>  点击EditConfigutation，配置vm options为 <code>-Dspring.profiles.active=test</code></li><li>命令行参数<br>  点击EditConfigutation，配置Program arguments为 <code>--spring.profiles.active=pro</code></li></ul><h4 id="Profile-小结"><a href="#Profile-小结" class="headerlink" title="Profile-小结"></a>Profile-小结</h4><p>1）profile是用来完成不同环境下，配置动态切换功能的。</p><p>2）profile配置方式</p><ul><li>多profile文件方式：提供多个配置文件，每个代表一种环境。<ul><li>application-dev.properties/yml 开发环境</li><li>application-test.properties/yml 测试环境</li><li>application-pro.properties/yml 生产环境</li></ul></li><li>yml多文档方式：<ul><li>在yml中使用 <code>---</code> 分隔不同配置</li></ul></li></ul><p>3）profile激活方式</p><ul><li>配置文件：再配置文件中配置：<code>spring.profiles.active=dev</code></li><li>虚拟机参数：在VM options 指定：<code>-Dspring.profiles.active=dev</code></li><li>命令行参数：使用package命令打包，成为jar包后，直接使用命令<code>java –jar xxx.jar  --spring.profiles.active=dev</code></li></ul><h4 id="内部配置加载顺序"><a href="#内部配置加载顺序" class="headerlink" title="内部配置加载顺序"></a>内部配置加载顺序</h4><p>Springboot程序启动时，会从以下位置加载配置文件：</p><ol><li>file:./config/：当前项目下的/config目录下</li><li>file:./           ：当前项目的根目录  </li><li>classpath:/config/：classpath的/config目录</li><li>classpath:/  ：classpath的根目录</li></ol><p>加载顺序为上文的排列顺序，高优先级配置的属性会生效</p><blockquote><p> 注意：file那两个不符合maven结构不会被打进jar包中，命令行运行不会加载。</p></blockquote><h4 id="外部配置加载顺序"><a href="#外部配置加载顺序" class="headerlink" title="外部配置加载顺序"></a>外部配置加载顺序</h4><p>通过官网查看外部属性加载顺序：</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html">https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html</a></p><p>可以通过命令行更改配置<code>java -jar .\***.jar --server.port=8082 --server.servlet.context-path=/hehe </code> </p><p>也可以通过指定外部文件<code>java -jar .\***.jar --spring.config.location=e://application.properties</code></p><p>jar包也会自动加载同级目录下的application.properties 或config/application.properties文件。</p><p>外部配置可以用来在部署时更改内容（已经打成了jar包）。</p><h3 id="SpringBoot-整合其他框架"><a href="#SpringBoot-整合其他框架" class="headerlink" title="SpringBoot 整合其他框架"></a>SpringBoot 整合其他框架</h3><p>案例：需求<br><strong>SpringBoot</strong>整合<strong>Junit</strong>。</p><p>案例：实现步骤</p><ol><li><p>搭建SpringBoot工程</p></li><li><p>引入starter-test起步依赖</p></li><li><p>编写测试类</p></li><li><p>添加测试相关注解</p><ul><li>@RunWith(SpringRunner.class)</li><li>@SpringBootTest(classes = 启动类.class)</li></ul></li><li><p>编写测试方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* UserService的测试类</span></span><br><span class="line"><span class="comment">* 如果测试类是引导类包或者包下的子包，可以省略classes </span></span><br><span class="line"><span class="comment">* 如UserServiceTest 在test/java 的 com.itheima.springboottest包下</span></span><br><span class="line"><span class="comment">* SpringbootTestApplication在main/java的com.itheima.springboottest包下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Runwith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = SpringbootTestApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>案例：需求<br><strong>SpringBoot</strong>整合<strong>Redis</strong>。</p><p>案例：实现步骤</p><ol><li><p>搭建SpringBoot工程(Nosql)</p></li><li><p>引入redis起步依赖 <code>spring-boot-starter-data-redis</code></p></li><li><p>编写redis相关属性</p></li><li><p>注入RedisTemplate模板</p></li><li><p>编写测试方法，测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Runwith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">//redis链接信息默认为本机的ip 6379端口号</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).set(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Object name = redisTemplate.boundValueOps(<span class="string">&quot;name&quot;</span>).get();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.yml 更改redis ip地址端口号 输入redis会有提示，可以选择</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li></ol><p>案例：需求<br><strong>SpringBoot</strong>整合<strong>MyBatis</strong>。</p><p>案例：实现步骤</p><ol><li><p>搭建SpringBoot工程(勾选SQL中的MySQL Driver 依赖和 MyBatis Framework依赖)</p></li><li><p>引入mybatis起步依赖(<code>mybatis-spring-boot-starter</code>,spring-boot 开头的都是spring官方提供的)，添加mysql驱动 <code>mysql-connector-java</code></p></li><li><p>编写DataSource和MyBatis相关配置</p></li><li><p>定义表和实体类</p></li><li><p>编写dao和mapper文件/纯注解开发</p></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//user实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//getter setter toString方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.xml 需要配置时区，不然会出错</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot？serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="comment">#会建议使用 com.mysql.cj.jdbc.Driver驱动，上面那个版本太老了。</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from t_user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">springbootMybatisApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用xml</p><p>新建UserXmlMapper类和UserMapper类基本相同即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--还需要一个约束头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.springbootmybatis.mapper.UserXmlMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> =<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span> = <span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#application.yml 添加</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span> <span class="comment">#mapper映射文件路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.springbootmybatis.domain</span></span><br><span class="line">  <span class="comment">#config-location: #指定mybatis的核心配置文件</span></span><br></pre></td></tr></table></figure><p>稍微更改下测试类运行即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SpringBoot-概述&quot;&gt;&lt;a href=&quot;#SpringBoot-概述&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 概述&quot;&gt;&lt;/a&gt;SpringBoot 概述&lt;/h3&gt;&lt;h4 id=&quot;SpringBoot-概念&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="黑马程序员 springboot" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-springboot/"/>
    
  </entry>
  
  <entry>
    <title>16_MyBatis注解开发</title>
    <link href="http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    <id>http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</id>
    <published>2021-07-28T02:38:21.000Z</published>
    <updated>2021-07-28T02:48:32.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Mybatis的注解开发"><a href="#1-Mybatis的注解开发" class="headerlink" title="1.Mybatis的注解开发"></a>1.Mybatis的注解开发</h3><h4 id="1-1-MyBatis的常用注解"><a href="#1-1-MyBatis的常用注解" class="headerlink" title="1.1 MyBatis的常用注解"></a>1.1 MyBatis的常用注解</h4><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper</p><p>映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p><p>@Insert：实现新增<br>@Update：实现更新<br>@Delete：实现删除<br>@Select：实现查询<br>@Result：实现结果集封装<br>@Results：可以与@Result 一起使用，封装多个结果集<br>@One：实现一对一结果集封装<br>@Many：实现一对多结果集封装</p><h4 id="1-2-MyBatis的增删改查"><a href="#1-2-MyBatis的增删改查" class="headerlink" title="1.2 MyBatis的增删改查"></a>1.2 MyBatis的增删改查</h4><p>我们完成简单的user表的增删改查的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;测试数据&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    userMapper.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">16</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;测试数据修改&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    userMapper.delete(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者指定扫描包含映射关系的接口所在的包也可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口中方法上添加注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;birthday&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-MyBatis的注解实现复杂映射开发"><a href="#1-3-MyBatis的注解实现复杂映射开发" class="headerlink" title="1.3 MyBatis的注解实现复杂映射开发"></a>1.3 MyBatis的注解实现复杂映射开发</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<resultMap>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</resultMap></p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Results</td><td>代替的是标签<resultMap>该注解中可以使用单个@Result注解，也可以使用@Result集合。使用格式：@Results（{@Result（），@Result（）}）或@Results（@Result（））</resultMap></td></tr><tr><td>@Resut</td><td>代替了<id>标签和<result>标签  @Result中属性介绍：  column：数据库的列名  property：需要装配的属性名  one：需要使用的@One  注解（@Result（one=@One）（）））  many：需要使用的@Many  注解（@Result（many=@many）（）））</result></id></td></tr><tr><td>@One （一对一）</td><td>代替了<assocation> 标签，是多表查询的关键，在注解中用来指定子查询返回单一对象。  @One注解属性介绍：  select: 指定用来多表查询的 sqlmapper  使用格式：@Result(column=”  “,property=””,one=@One(select=””))</assocation></td></tr><tr><td>@Many （多对一）</td><td>代替了<collection>标签, 是是多表查询的关键，在注解中用来指定子查询返回对象集合。  使用格式：@Result(property=””,column=””,many=@Many(select=””))</collection></td></tr></tbody></table><h4 id="1-4-一对一查询"><a href="#1-4-一对一查询" class="headerlink" title="1.4 一对一查询"></a>1.4 一对一查询</h4><ol><li>一对一查询的模型</li></ol><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2129_2.png" alt="2129_2"></p><ol start="2"><li>一对一查询的语句</li></ol><p>对应的sql语句：</p><p><code>select * from orders;</code></p><p><code>select * from user where id=查询出订单的uid;</code></p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2131_1.png" alt="2131_1"></p><p>3.  创建Order和User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.  创建OrderMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.  使用注解配置Mapper</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2133_1.png" alt="2133_1"></p><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOrderAndUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Order&gt; all = orderMapper.findAll();</span><br><span class="line">    <span class="keyword">for</span>(Order order : all)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2135_1.png" alt="2135_1"></p><h4 id="1-5-一对多查询"><a href="#1-5-一对多查询" class="headerlink" title="1.5 一对多查询"></a>1.5 一对多查询</h4><ol><li>一对多查询的模型</li></ol><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p><p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p><p>![2129_2 (2)](16_MyBatis注解开发/2129_2 (2).png)</p><ol start="2"><li>一对多查询的语句</li></ol><p>对应的sql语句：</p><p><code>select * from user;</code></p><p><code>select * from orders where uid=查询出用户的id;</code></p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2137_1.png" alt="2137_1"></p><p>3.  修改User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.  创建UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndOrder</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>5.  使用注解配置Mapper</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2139_1.png" alt="2139_1"></p><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; all = userMapper.findAllUserAndOrder();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2141_1.png" alt="2141_1"></p><h4 id="1-6-多对多查询"><a href="#1-6-多对多查询" class="headerlink" title="1.6 多对多查询"></a>1.6 多对多查询</h4><ol><li>多对多查询的模型</li></ol><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p><p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2143_1.png" alt="2143_1"></p><ol start="2"><li>多对多查询的语句</li></ol><p>对应的sql语句：</p><p><code>select * from user;</code><br><code>select * from role r,user_roleurwhere r.id=ur.role_idand ur.user_id=用户的id</code></p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2145_1.png" alt="2145_1"></p><p>3.  创建Role实体，修改User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.  添加UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndRole</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>5.  使用注解配置Mapper</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2147_1.png" alt="2147_1"></p><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList)&#123;</span><br><span class="line">        System.out.println(role);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/16_MyBatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/2149_1.png" alt="2149_1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Mybatis的注解开发&quot;&gt;&lt;a href=&quot;#1-Mybatis的注解开发&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis的注解开发&quot;&gt;&lt;/a&gt;1.Mybatis的注解开发&lt;/h3&gt;&lt;h4 id=&quot;1-1-MyBatis的常用注解&quot;</summary>
      
    
    
    
    
    <category term="黑马程序员 SSM" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SSM/"/>
    
  </entry>
  
  <entry>
    <title>15_MyBatis多表操作</title>
    <link href="http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-07-28T02:38:03.000Z</published>
    <updated>2021-07-28T02:48:04.246Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Mybatis多表查询"><a href="#1-Mybatis多表查询" class="headerlink" title="1.Mybatis多表查询"></a>1.Mybatis多表查询</h3><h4 id="1-1-一对一查询"><a href="#1-1-一对一查询" class="headerlink" title="1.1 一对一查询"></a>1.1 一对一查询</h4><ol><li>一对一查询的模型</li></ol><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2109_2.png" alt="2109_2"></p><ol start="2"><li>一对一查询的语句</li></ol><p>对应的sql语句：select *  from orders o,user u where o.uid=u.id;</p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2111_1.png" alt="2111_1"></p><p>3.  创建Order和User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.  创建OrderMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.  配置OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<resultMap>还可以配置如下：</resultMap></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OrderMapper mapper = sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">List&lt;Order&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(Order order : all)&#123;</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2115_1.png" alt="2115_1"></p><h4 id="1-2-一对多查询"><a href="#1-2-一对多查询" class="headerlink" title="1.2 一对多查询"></a>1.2 一对多查询</h4><ol><li>一对多查询的模型</li></ol><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户<br>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p><p>![2109_2 (1)](15_MyBatis多表操作/2109_2 (1).png)</p><ol start="2"><li>一对多查询的语句</li></ol><p>对应的sql语句：<code>select *,o.id oidfrom user u left join orders o on u.id=o.uid;</code></p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2117_1.png" alt="2117_1"></p><p>3.  修改User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.  创建UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.  配置UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2119_1.png" alt="2119_1"></p><h4 id="1-3-多对多查询"><a href="#1-3-多对多查询" class="headerlink" title="1.3 多对多查询"></a>1.3 多对多查询</h4><ol><li>多对多查询的模型</li></ol><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p><p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2121_1.png" alt="2121_1"></p><ol start="2"><li>多对多查询的语句</li></ol><p>对应的sql语句：<code>select u.*,r.*,r.id rid from user u left join user_roleuron u.id=ur.user_id inner join role r on ur.role_id=r.id;</code></p><p>查询的结果如下：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2123_1.png" alt="2123_1"></p><p>3.  创建Role实体，修改User实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.  添加UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndRole</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>5.  配置UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rolename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;rolename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUserAndRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMap&quot;</span>&gt;</span></span><br><span class="line">    select u.*,r.*,r.id rid from user u left join user_role ur on u.id=ur.user_id</span><br><span class="line">    inner join role r on ur.role_id=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.  测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList)&#123;</span><br><span class="line">        System.out.println(role);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/15_MyBatis%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C/2125_1.png" alt="2125_1"></p><h4 id="1-4-知识小结"><a href="#1-4-知识小结" class="headerlink" title="1.4 知识小结"></a>1.4 知识小结</h4><p>MyBatis多表配置方式：</p><p>一对一配置：使用<code>&lt;resultMap&gt;</code>做配置<br>一对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置<br>多对多配置：使用<code>&lt;resultMap&gt;+&lt;collection&gt;</code>做配置</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Mybatis多表查询&quot;&gt;&lt;a href=&quot;#1-Mybatis多表查询&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis多表查询&quot;&gt;&lt;/a&gt;1.Mybatis多表查询&lt;/h3&gt;&lt;h4 id=&quot;1-1-一对一查询&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
    <category term="黑马程序员 SSM" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SSM/"/>
    
  </entry>
  
  <entry>
    <title>14_MyBatis核心配置文件深入</title>
    <link href="http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/14_MyBatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/"/>
    <id>http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/14_MyBatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/</id>
    <published>2021-07-28T02:37:21.000Z</published>
    <updated>2021-07-28T02:47:28.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MyBatis核心配置文件深入"><a href="#1-MyBatis核心配置文件深入" class="headerlink" title="1. MyBatis核心配置文件深入"></a>1. MyBatis核心配置文件深入</h3><h4 id="1-1-typeHandlers标签"><a href="#1-1-typeHandlers标签" class="headerlink" title="1.1 typeHandlers标签"></a>1.1 typeHandlers标签</h4><p>无论是MyBatis在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成Java 类型。下表描述了一些默认的类型处理器（截取部分）。</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/14_MyBatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/2101_1.png" alt="2101_1"></p><p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现org.apache.ibatis.type.TypeHandler接口，或继承一个很便利的类org.apache.ibatis.type.BaseTypeHandler，然后可以选择性地将它映射到一个JDBC类型。例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换。</p><p>开发步骤：</p><p>①定义转换类继承类BaseTypeHandler<T><br>②覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时mysql的字符串类型转换成java的Type类型的方法<br>③在MyBatis核心配置文件中进行注册<br>④测试转换是否正确</T></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType type)</span> </span>&#123;</span><br><span class="line">        preparedStatement.setString(i,date.getTime()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(resultSet.getLong(s));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(resultSet.getLong(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callableStatement.getDate(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.itheima.typeHandlers.MyDateTypeHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试添加操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">userMapper.add2(user);</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/14_MyBatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/2103_1.png" alt="2103_1"></p><p>测试查询操作：</p><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/14_MyBatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/2105_1.png" alt="2105_1"></p><h4 id="1-2-plugins标签"><a href="#1-2-plugins标签" class="headerlink" title="1.2 plugins标签"></a>1.2 plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p><p>开发步骤：</p><p>①导入通用PageHelper的坐标<br>②在mybatis核心配置文件中配置PageHelper插件<br>③测试分页数据获取</p><p>①导入通用 PageHelper 坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②在mybatis核心配置文件中配置PageHelper插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：分页助手的插件  配置在通用馆mapper之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③测试分页代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; select = userMapper2.select(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(User user : select)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得分页相关的其他参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(select);</span><br><span class="line">System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br></pre></td></tr></table></figure><h4 id="1-3-知识小结"><a href="#1-3-知识小结" class="headerlink" title="1.3 知识小结"></a>1.3 知识小结</h4><p>MyBatis核心配置文件常用标签：</p><p>1、properties标签：该标签可以加载外部的properties文件<br>2、typeAliases标签：设置类型别名<br>3、environments标签：数据源环境配置标签<br>4、typeHandlers标签：配置自定义类型处理器<br>5、plugins标签：配置MyBatis的插件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-MyBatis核心配置文件深入&quot;&gt;&lt;a href=&quot;#1-MyBatis核心配置文件深入&quot; class=&quot;headerlink&quot; title=&quot;1. MyBatis核心配置文件深入&quot;&gt;&lt;/a&gt;1. MyBatis核心配置文件深入&lt;/h3&gt;&lt;h4 id=&quot;1-1</summary>
      
    
    
    
    
    <category term="黑马程序员 SSM" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SSM/"/>
    
  </entry>
  
  <entry>
    <title>13_MyBatis映射文件深入（动态SQL）</title>
    <link href="http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/13_MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%EF%BC%88%E5%8A%A8%E6%80%81SQL%EF%BC%89/"/>
    <id>http://example.com/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/13_MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%EF%BC%88%E5%8A%A8%E6%80%81SQL%EF%BC%89/</id>
    <published>2021-07-28T02:36:56.000Z</published>
    <updated>2021-07-28T02:46:52.793Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MyBatis映射文件深入"><a href="#1-MyBatis映射文件深入" class="headerlink" title="1.MyBatis映射文件深入"></a>1.MyBatis映射文件深入</h3><h3 id="1-1-动态sql语句"><a href="#1-1-动态sql语句" class="headerlink" title="1.1 动态sql语句"></a>1.1 动态sql语句</h3><ol><li><p>动态sql语句概述</p><p> Mybatis的映射文件中，前面我们的SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的SQL是动态变化的，此时在前面的学习中我们的SQL 就不能满足要求了。</p></li></ol><p>参考的官方文档，描述如下：</p><p>![2091_1 (1)](13_MyBatis映射文件深入（动态SQL）/2091_1 (1).png)</p><ol start="2"><li><p>动态SQL  之<if> </if></p><p> 我们根据实体类的不同取值，使用不同的SQL语句来进行查询。比如在id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当查询条件id和username都存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   … … …</span><br><span class="line">   <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">  User condition = <span class="keyword">new</span> User();</span><br><span class="line">  condition.setId(<span class="number">1</span>);</span><br><span class="line">  condition.setUsername(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">  User user = userMapper.findByCondition(condition);</span><br><span class="line">  … … …</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/13_MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%EF%BC%88%E5%8A%A8%E6%80%81SQL%EF%BC%89/2093_1.png" alt="2093_1"></p><p>当查询条件只有id存在时，控制台打印的sql语句如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   … … …</span><br><span class="line">   <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">  User condition = <span class="keyword">new</span> User();</span><br><span class="line">  condition.setId(<span class="number">1</span>);</span><br><span class="line">  User user = userMapper.findByCondition(condition);</span><br><span class="line">  … … …</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/13_MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%EF%BC%88%E5%8A%A8%E6%80%81SQL%EF%BC%89/2095_1.png" alt="2095_1"></p><ol start="3"><li><p>动态SQL  之<foreach> </foreach></p><p> 循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   … … …</span><br><span class="line">   <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">  <span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">  List&lt;User&gt; userList = userMapper.findByIds(ids);</span><br><span class="line">  System.out.println(userList);</span><br><span class="line">  … … …</span><br></pre></td></tr></table></figure><p><img src="/2021/07/28/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98/SSM%E6%A1%86%E6%9E%B6/13_MyBatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5%EF%BC%88%E5%8A%A8%E6%80%81SQL%EF%BC%89/2097_1.png" alt="2097_1"></p><p>foreach标签的属性含义如下：</p><p><code>&lt;foreach&gt;</code>标签用于遍历集合，它的属性：</p><ul><li>collection：代表要遍历的集合元素，注意编写时不要写#{}</li><li>open：代表语句的开始部分</li><li>close：代表结束部分</li><li>item：代表遍历集合的每个元素，生成的变量名</li><li>sperator：代表分隔符</li></ul><h4 id="1-2-SQL片段抽取"><a href="#1-2-SQL片段抽取" class="headerlink" title="1.2 SQL片段抽取"></a>1.2 SQL片段抽取</h4><p>Sql中可将重复的sql提取出来，使用时用include 引用即可，最终达到sql重用的目的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取sql片段简化编写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span> <span class="attr">select</span> * <span class="attr">from</span> <span class="attr">User</span>&lt;/<span class="attr">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-知识小结"><a href="#1-3-知识小结" class="headerlink" title="1.3 知识小结"></a>1.3 知识小结</h4><p>MyBatis映射文件配置：<br><code>&lt;select&gt;</code>：查询<br><code>&lt;insert&gt;</code>：插入<br><code>&lt;update&gt;</code>：修改<br><code>&lt;delete&gt;</code>：删除<br><code>&lt;where&gt;</code>：where条件<br><code>&lt;if&gt;</code>：if判断<br><code>&lt;foreach&gt;</code>：循环<br><code>&lt;sql&gt;</code>：sql片段抽取</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-MyBatis映射文件深入&quot;&gt;&lt;a href=&quot;#1-MyBatis映射文件深入&quot; class=&quot;headerlink&quot; title=&quot;1.MyBatis映射文件深入&quot;&gt;&lt;/a&gt;1.MyBatis映射文件深入&lt;/h3&gt;&lt;h3 id=&quot;1-1-动态sql语句&quot;&gt;</summary>
      
    
    
    
    
    <category term="黑马程序员 SSM" scheme="http://example.com/tags/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98-SSM/"/>
    
  </entry>
  
</feed>
